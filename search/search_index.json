{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Containers Awesome LSIO Consolidating Proxies Optimizing Nextcloud Piped Searx Securing SWAG SOCKS Proxy Split Tunnel VPN Route VPS Proxy Tools Setup Template Tmux","title":"Home"},{"location":"#containers","text":"Awesome LSIO Consolidating Proxies Optimizing Nextcloud Piped Searx Securing SWAG SOCKS Proxy Split Tunnel VPN Route VPS Proxy","title":"Containers"},{"location":"#tools","text":"Setup Template Tmux","title":"Tools"},{"location":"awesome-lsio/","text":"Awesome LSIO Administration Container Description doublecommander Double Commander is a free cross platform open source file manager with two panels side by side. It is inspired by Total Commander and features some new ideas. endlessh endlessh is an SSH tarpit that very slowly sends an endless, random SSH banner. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server. ldap-auth ldap-auth software is for authenticating users who request protected resources from servers proxied by nginx. It includes a daemon (ldap-auth) that communicates with an authentication server, and a webserver daemon that generates an authentication cookie based on the user\u2019s credentials. The daemons are written in Python for use with a Lightweight Directory Access Protocol (LDAP) authentication server (OpenLDAP or Microsoft Windows Active Directory 2003 and 2012). netbootxyz netbootxyz is a way to PXE boot various operating system installers or utilities from one place within the BIOS without the need of having to go retrieve the media to run the tool. iPXE is used to provide a user friendly menu from within the BIOS that lets you easily choose the operating system you want along with any specific types of versions or bootable flags. netbox netbox is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. Initially conceived by the network engineering team at DigitalOcean, NetBox was developed specifically to address the needs of network and infrastructure engineers. It is intended to function as a domain-specific source of truth for network operations. openssh-server openssh-server is a sandboxed environment that allows ssh access without giving keys to the entire server. snipe-it snipe-it makes asset management easy. It was built by people solving real-world IT and asset management problems, and a solid UX has always been a top priority. Straightforward design and bulk actions mean getting things done faster. taisun taisun is an application for a Docker enabled device with an emphasis on providing a web based interface for managing a single server. Audiobooks Container Description booksonic booksonic is a server and an app for streaming your audiobooks to any pc or android phone. Most of the functionality is also availiable on other platforms that have apps for subsonic. booksonic-air booksonic-air is a platform for accessing the audibooks you own wherever you are. At the moment the platform consists of Automation Container Description domoticz domoticz is a Home Automation System that lets you monitor and configure various devices like: Lights, Switches, various sensors/meters like Temperature, Rain, Wind, UV, Electra, Gas, Water and much more. Notifications/Alerts can be sent to any mobile device. habridge habridge emulates Philips Hue API to other home automation gateways such as an Amazon Echo/Dot Gen 1 (gen 2 has issues discovering ha-bridge) or other systems that support Philips Hue. The Bridge handles basic commands such as \"On\", \"Off\" and \"brightness\" commands of the hue protocol. This bridge can control most devices that have a distinct API. homeassistant homeassistant is open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server. kanzi kanzi , formerly titled Kodi-Alexa, this custom skill is the ultimate voice remote control for navigating Kodi. It can do anything you can think of (100+ intents). This container also contains lexigram-cli to setup Kanzi with an Amazon Developer Account and automatically deploy it to Amazon. Backup Container Description duplicati duplicati works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive & S3, Google Drive, box.com, Mega, hubiC and many others. resilio-sync resilio-sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both. There is an official sync image but we created this one as it supports user mapping to simplify permissions for volumes. rsnapshot rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.\" syncthing syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet. Books Container Description calibre calibre is a powerful and easy to use e-book manager. Users say it\u2019s outstanding and a must-have. It\u2019ll allow you to do nearly everything and it takes things a step beyond normal e-book software. It\u2019s also completely free and open source and great for both casual users and computer experts. calibre-web calibre-web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database. It is also possible to integrate google drive and edit metadata and your calibre library through the app itself. cops cops by S\u00e9bastien Lucas, stands for Calibre OPDS (and HTML) Php Server. lazylibrarian lazylibrarian is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info. This container is based on the DobyTang fork. mylar3 mylar3 is an automated Comic Book downloader (cbr/cbz) for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients in addition to DDL. readarr No description ubooquity ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer. Cloud Container Description nextcloud nextcloud gives you access to all your files wherever you are. Crypto Container Description nano nano is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions. nano-wallet nano-wallet is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions. DNS Container Description adguardhome-sync adguardhome-sync is a tool to synchronize AdGuardHome config to replica instances. ddclient ddclient is a Perl client used to update dynamic DNS entries for accounts on Dynamic DNS Network Service Provider. It was originally written by Paul Burry and is now mostly by wimpunk. It has the capability to update more than just dyndns and it can fetch your WAN-ipaddress in a few different ways. duckdns duckdns is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence. Dashboard Container Description clarkson clarkson is a web-based dashboard application that gives you a neat and clean interface for logging your fuel fill-ups for all of your vehicles. The application has full multi-user support, as well as multiple vehicles per user. Whenever you fill-up your car or motorcycle, keep the receipt and record the data in Clarkson. heimdall heimdall is a way to organise all those links to your most used web sites and web applications in a simple way. muximux muximux is a lightweight portal to view & manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps. Databases Container Description mariadb mariadb is one of the most popular database servers. Made by the original developers of MySQL. mysql-workbench MySQL Workbench is a unified visual tool for database architects, developers, and DBAs. MySQL Workbench provides data modeling, SQL development, and comprehensive administration tools for server configuration, user administration, backup, and much more. phpmyadmin phpmyadmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. phpMyAdmin supports a wide range of operations on MySQL and MariaDB. sqlitebrowser DB Browser for SQLite is a high quality, visual, open source tool to create, design, and edit database files compatible with SQLite. Docker Container Description docker-compose No description fleet fleet provides an online web interface which displays a set of maintained images from one or more owned repositories. mods No description Documents Container Description libreoffice LibreOffice is a free and powerful office suite, and a successor to OpenOffice.org (commonly known as OpenOffice). Its clean interface and feature-rich tools help you unleash your creativity and enhance your productivity. paperless-ng paperless-ng is an application by Daniel Quinn and contributors that indexes your scanned documents and allows you to easily search for documents and store metadata alongside your documents.\" papermerge papermerge is an open source document management system (DMS) primarily designed for archiving and retrieving your digital documents. Instead of having piles of paper documents all over your desk, office or drawers - you can quickly scan them and configure your scanner to directly upload to Papermerge DMS.\" Downloaders Container Description deluge deluge is a lightweight, Free Software, cross-platform BitTorrent client. nntp2nntp nntp2nntp proxy allow you to use your NNTP Account from multiple systems, each with own user name and password. It fully supports SSL and you can also limit the access to proxy with SSL certificates. nntp2nntp proxy is very simple and pretty fast. nzbget nzbget is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources. pyload pyload is a Free and Open Source download manager written in Python and designed to be extremely lightweight, easily extensible and fully manageable via web. qbittorrent The qbittorrent project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library. sabnzbd sabnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction. transmission transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more. FTP Container Description davos davos is an FTP automation tool that periodically scans given host locations for new files. It can be configured for various purposes, including listening for specific files to appear in the host location, ready for it to download and then move, if required. It also supports completion notifications as well as downstream API calls, to further the workflow. filezilla FIleZilla Client is a fast and reliable cross-platform FTP, FTPS and SFTP client with lots of useful features and an intuitive graphical user interface. Family Container Description babybuddy babybuddy is a buddy for babies! Helps caregivers track sleep, feedings, diaper changes, tummy time and more to learn about and predict baby's needs without (as much) guess work. File Sharing Container Description projectsend projectsend is a self-hosted application that lets you upload files and assign them to specific clients that you create yourself. Secure, private and easy. No more depending on external services or e-mail to send those files. pwndrop pwndrop is a self-deployable file hosting service for sending out red teaming payloads or securely sharing your private files over HTTP and WebDAV. pydio-cells pydio-cells is the nextgen file sharing platform for organizations. It is a full rewrite of the Pydio project using the Go language following a micro-service architecture. snapdrop snapdrop A local file sharing in your browser. Inspired by Apple's Airdrop. xbackbone xbackbone is a simple, self-hosted, lightweight PHP file manager that support the instant sharing tool ShareX and *NIX systems. It supports uploading and displaying images, GIF, video, code, formatted text, and file downloading and uploading. Also have a web UI with multi user management, past uploads history and search support. Games Container Description emulatorjs emulatorjs - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS. minetest minetest (server) is a near-infinite-world block sandbox game and a game engine, inspired by InfiniMiner, Minecraft, and the like. IRC Container Description limnoria limnoria A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot. ngircd ngircd is a free, portable and lightweight Internet Relay Chat server for small or private networks, developed under the GNU General Public License (GPL). It is easy to configure, can cope with dynamic IP addresses, and supports IPv6, SSL-protected connections as well as PAM for authentication. It is written from scratch and not based on the original IRCd. pidgin Pidgin is a chat program which lets you log into accounts on multiple chat networks simultaneously. This means that you can be chatting with friends on XMPP and sitting in an IRC channel at the same time. quassel-core quassel-core is a modern, cross-platform, distributed IRC client, meaning that one (or multiple) client(s) can attach to and detach from a central core. quassel-web quassel-web is a web client for Quassel. Note that a Quassel-Core instance is required, we have a container available here. thelounge thelounge (a fork of shoutIRC) is a web IRC client that you host on your own server. znc znc is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC. Indexers Container Description jackett jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps. nzbhydra2 nzbhydra2 is a meta search application for NZB indexers, the \"spiritual successor\" to NZBmegasearcH, and an evolution of the original application NZBHydra . prowlarr No description Media Management Container Description bazarr bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you. couchpotato couchpotato is an automatic NZB and torrent downloader. You can keep a movies I want list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory. kodi-headless No description medusa medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic. radarr radarr - A fork of Sonarr to work with movies \u00e0 la Couchpotato. sickchill sickchill is an Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic. sickgear SickGear provides management of TV shows and/or Anime, it detects new episodes, links downloader apps, and more.. sonarr sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available. Media Players Container Description emby emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server. jellyfin jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it. plex plex organizes video, music and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone Plex Media Server. has always been a top priority. Straightforward design and bulk actions mean getting things done faster. Media Requesters Container Description ombi ombi allows you to host your own Plex Request and user management system. overseerr overseerr is a request management and media discovery tool built to work with your existing Plex ecosystem. requestrr requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat. Media Tools Container Description embystat embystat is a personal web server that can calculate all kinds of statistics from your (local) Emby server. Just install this on your server and let him calculate all kinds of fun stuff. ffmpeg No description htpcmanager htpcmanager is a front end for many htpc related applications. minisatip minisatip is a multi-threaded satip server version 1.2 that runs under Linux and it was tested with DVB-S, DVB-S2, DVB-T, DVB-T2, DVB-C, DVB-C2, ATSC and ISDB-T cards. oscam oscam is an Open Source Conditional Access Module software used for descrambling DVB transmissions using smart cards. It's both a server and a client. synclounge synclounge is a third party tool that allows you to watch Plex in sync with your friends/family, wherever you are. tautulli tautulli is a python based web application for monitoring, analytics and notifications for Plex Media Server. tvheadend tvheadend works as a proxy server: is a TV streaming server and recorder for Linux, FreeBSD and Android supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP and HDHomeRun as input sources. webgrabplus webgrabplus is a multi-site incremental xmltv epg grabber. It collects tv-program guide data from selected tvguide sites for your favourite channels. Monitor Container Description apprise-api apprise-api Takes advantage of Apprise through your network with a user-friendly API. diskover diskover is an open source file system indexer that uses Elasticsearch to index and manage data across heterogeneous storage systems. healthchecks healthchecks is a watchdog for your cron jobs. It's a web server that listens for pings from your cron jobs, plus a web interface. librespeed librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. scrutiny scrutiny WebUI for smartd S.M.A.R.T monitoring. Scrutiny is a Hard Drive Health Dashboard & Monitoring solution, merging manufacturer provided S.M.A.R.T metrics with real-world failure rates from Backblaze. smokeping smokeping keeps track of your network latency. For a full example of what this application is capable of visit UCDavis . syslog-ng syslog-ng allows you to flexibly collect, parse, classify, rewrite and correlate logs from across your infrastructure and store or route them to log analysis tools. Music Container Description airsonic airsonic is a free, web-based media streamer, providing ubiquitious access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room. airsonic-advanced airsonic-advanced is a free, web-based media streamer, providing ubiquitious access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room. audacity Audacity is an easy-to-use, multi-track audio editor and recorder. Developed by a group of volunteers as open source. beets beets is a music library manager and not, for the most part, a music player. It does include a simple player plugin and an experimental Web-based player, but it generally leaves actual sound-reproduction to specialized tools. daapd daapd (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), Chromecast, MPD and internet radio. headphones headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, \u00b5Torrent and Blackhole. lidarr lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available. mstream mstream is a personal music streaming server. You can use mStream to stream your music from your home computer to any device, anywhere. There are mobile apps available for both Android and iPhone. Network Container Description unifi-controller The unifi-controller Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance. wireshark Wireshark is the world\u2019s foremost and widely-used network protocol analyzer. It lets you see what\u2019s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998. Photos Container Description chevereto chevereto is an image hosting software that allows you to create a beautiful and full-featured image hosting website on your own server. It's your hosting and your rules, so say goodbye to closures and restrictions. darktable darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoomable lighttable and enables you to develop raw images and enhance them. digikam digiKam : Professional Photo Management with the Power of Open Source lychee lychee is a free photo-management tool, which runs on your server or web-space. Installing is a matter of seconds. Upload, manage and share photos like from a native application. Lychee comes with everything you need and all your photos are stored securely.\" photoshow photoshow is gallery software at its easiest, it doesn't even require a database. piwigo piwigo is a photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures. pixapop pixapop is an open-source single page application to view your photos in the easiest way possible. Programming Container Description cloud9 cloud9 Cloud9 is a complete web based IDE with terminal access. This container is for running their core SDK locally and developing plugins. code-server code-server is VS Code running on a remote server, accessible through the browser. openvscode-server openvscode-server provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. pylon pylon is a web based integrated development environment built with Node.js as a backend and with a supercharged JavaScript/HTML5 frontend, licensed under GPL version 3. This project originates from Cloud9 v2 project. RSS Container Description freshrss freshrss is a free, self-hostable aggregator for rss feeds. Recipes Container Description grocy grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility. Remote Container Description guacd guacd - Apache Guacamole is a clientless remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH. This container is only the backend server component needed to use The official or 3rd party HTML5 frontends. rdesktop rdesktop - Ubuntu based containers containing full desktop environments in officially supported flavors accessible via RDP. remmina Remmina is a remote desktop client written in GTK, aiming to be useful for system administrators and travellers, who need to work with lots of remote computers in front of either large or tiny screens. Remmina supports multiple network protocols, in an integrated and consistent user interface. Currently RDP, VNC, SPICE, NX, XDMCP, SSH and EXEC are supported. webtop webtop - Alpine, Ubuntu, Fedora, and Arch based containers containing full desktop environments in officially supported flavors accessible via any modern web browser. Science Container Description boinc BOINC is a platform for high-throughput computing on a large scale (thousands or millions of computers). It can be used for volunteer computing (using consumer devices) or grid computing (using organizational resources). It supports virtualized, parallel, and GPU-based applications. foldingathome Folding@home is a distributed computing project for simulating protein dynamics, including the process of protein folding and the movements of proteins implicated in a variety of diseases. It brings together citizen scientists who volunteer to run simulations of protein dynamics on their personal computers. Insights from this data are helping scientists to better understand biology, and providing new opportunities for developing therapeutics. Tools Container Description yq No description VPN Container Description wireguard WireGuard\u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry. Web Container Description firefox Firefox Browser, also known as Mozilla Firefox or simply Firefox, is a free and open-source web browser developed by the Mozilla Foundation and its subsidiary, the Mozilla Corporation. Firefox uses the Gecko layout engine to render web pages, which implements current and anticipated web standards. grav grav is a Fast, Simple, and Flexible, file-based Web-platform. ipfs ipfs - A peer-to-peer hypermedia protocol designed to make the web faster, safer, and more open. nginx nginx is a simple webserver with php support. The config files reside in /config for easy user customization. swag SWAG - Secure Web Application Gateway (formerly known as letsencrypt, no relation to Let's Encrypt\u2122) sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let's Encrypt and ZeroSSL). It also contains fail2ban for intrusion prevention. Wiki Container Description bookstack bookstack is a free and open source Wiki designed for creating beautiful documentation. Featuring a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease. dillinger dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor. dokuwiki dokuwiki is a simple to use and highly versatile Open Source wiki software that doesn't require a database. It is loved by users for its clean and readable syntax. The ease of maintenance, backup and integration makes it an administrator's favorite. Built in access controls and authentication connectors make DokuWiki especially useful in the enterprise context and the large number of plugins contributed by its vibrant community allow for a broad range of use cases beyond a traditional wiki. hedgedoc HedgeDoc gives you access to all your files wherever you are. raneto raneto - is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase. wikijs wikijs A modern, lightweight and powerful wiki app built on NodeJS.","title":"Awesome LSIO"},{"location":"awesome-lsio/#awesome-lsio","text":"","title":"Awesome LSIO"},{"location":"awesome-lsio/#administration","text":"Container Description doublecommander Double Commander is a free cross platform open source file manager with two panels side by side. It is inspired by Total Commander and features some new ideas. endlessh endlessh is an SSH tarpit that very slowly sends an endless, random SSH banner. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server. ldap-auth ldap-auth software is for authenticating users who request protected resources from servers proxied by nginx. It includes a daemon (ldap-auth) that communicates with an authentication server, and a webserver daemon that generates an authentication cookie based on the user\u2019s credentials. The daemons are written in Python for use with a Lightweight Directory Access Protocol (LDAP) authentication server (OpenLDAP or Microsoft Windows Active Directory 2003 and 2012). netbootxyz netbootxyz is a way to PXE boot various operating system installers or utilities from one place within the BIOS without the need of having to go retrieve the media to run the tool. iPXE is used to provide a user friendly menu from within the BIOS that lets you easily choose the operating system you want along with any specific types of versions or bootable flags. netbox netbox is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. Initially conceived by the network engineering team at DigitalOcean, NetBox was developed specifically to address the needs of network and infrastructure engineers. It is intended to function as a domain-specific source of truth for network operations. openssh-server openssh-server is a sandboxed environment that allows ssh access without giving keys to the entire server. snipe-it snipe-it makes asset management easy. It was built by people solving real-world IT and asset management problems, and a solid UX has always been a top priority. Straightforward design and bulk actions mean getting things done faster. taisun taisun is an application for a Docker enabled device with an emphasis on providing a web based interface for managing a single server.","title":"Administration"},{"location":"awesome-lsio/#audiobooks","text":"Container Description booksonic booksonic is a server and an app for streaming your audiobooks to any pc or android phone. Most of the functionality is also availiable on other platforms that have apps for subsonic. booksonic-air booksonic-air is a platform for accessing the audibooks you own wherever you are. At the moment the platform consists of","title":"Audiobooks"},{"location":"awesome-lsio/#automation","text":"Container Description domoticz domoticz is a Home Automation System that lets you monitor and configure various devices like: Lights, Switches, various sensors/meters like Temperature, Rain, Wind, UV, Electra, Gas, Water and much more. Notifications/Alerts can be sent to any mobile device. habridge habridge emulates Philips Hue API to other home automation gateways such as an Amazon Echo/Dot Gen 1 (gen 2 has issues discovering ha-bridge) or other systems that support Philips Hue. The Bridge handles basic commands such as \"On\", \"Off\" and \"brightness\" commands of the hue protocol. This bridge can control most devices that have a distinct API. homeassistant homeassistant is open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server. kanzi kanzi , formerly titled Kodi-Alexa, this custom skill is the ultimate voice remote control for navigating Kodi. It can do anything you can think of (100+ intents). This container also contains lexigram-cli to setup Kanzi with an Amazon Developer Account and automatically deploy it to Amazon.","title":"Automation"},{"location":"awesome-lsio/#backup","text":"Container Description duplicati duplicati works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive & S3, Google Drive, box.com, Mega, hubiC and many others. resilio-sync resilio-sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both. There is an official sync image but we created this one as it supports user mapping to simplify permissions for volumes. rsnapshot rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.\" syncthing syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet.","title":"Backup"},{"location":"awesome-lsio/#books","text":"Container Description calibre calibre is a powerful and easy to use e-book manager. Users say it\u2019s outstanding and a must-have. It\u2019ll allow you to do nearly everything and it takes things a step beyond normal e-book software. It\u2019s also completely free and open source and great for both casual users and computer experts. calibre-web calibre-web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database. It is also possible to integrate google drive and edit metadata and your calibre library through the app itself. cops cops by S\u00e9bastien Lucas, stands for Calibre OPDS (and HTML) Php Server. lazylibrarian lazylibrarian is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info. This container is based on the DobyTang fork. mylar3 mylar3 is an automated Comic Book downloader (cbr/cbz) for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients in addition to DDL. readarr No description ubooquity ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer.","title":"Books"},{"location":"awesome-lsio/#cloud","text":"Container Description nextcloud nextcloud gives you access to all your files wherever you are.","title":"Cloud"},{"location":"awesome-lsio/#crypto","text":"Container Description nano nano is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions. nano-wallet nano-wallet is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions.","title":"Crypto"},{"location":"awesome-lsio/#dns","text":"Container Description adguardhome-sync adguardhome-sync is a tool to synchronize AdGuardHome config to replica instances. ddclient ddclient is a Perl client used to update dynamic DNS entries for accounts on Dynamic DNS Network Service Provider. It was originally written by Paul Burry and is now mostly by wimpunk. It has the capability to update more than just dyndns and it can fetch your WAN-ipaddress in a few different ways. duckdns duckdns is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.","title":"DNS"},{"location":"awesome-lsio/#dashboard","text":"Container Description clarkson clarkson is a web-based dashboard application that gives you a neat and clean interface for logging your fuel fill-ups for all of your vehicles. The application has full multi-user support, as well as multiple vehicles per user. Whenever you fill-up your car or motorcycle, keep the receipt and record the data in Clarkson. heimdall heimdall is a way to organise all those links to your most used web sites and web applications in a simple way. muximux muximux is a lightweight portal to view & manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps.","title":"Dashboard"},{"location":"awesome-lsio/#databases","text":"Container Description mariadb mariadb is one of the most popular database servers. Made by the original developers of MySQL. mysql-workbench MySQL Workbench is a unified visual tool for database architects, developers, and DBAs. MySQL Workbench provides data modeling, SQL development, and comprehensive administration tools for server configuration, user administration, backup, and much more. phpmyadmin phpmyadmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. phpMyAdmin supports a wide range of operations on MySQL and MariaDB. sqlitebrowser DB Browser for SQLite is a high quality, visual, open source tool to create, design, and edit database files compatible with SQLite.","title":"Databases"},{"location":"awesome-lsio/#docker","text":"Container Description docker-compose No description fleet fleet provides an online web interface which displays a set of maintained images from one or more owned repositories. mods No description","title":"Docker"},{"location":"awesome-lsio/#documents","text":"Container Description libreoffice LibreOffice is a free and powerful office suite, and a successor to OpenOffice.org (commonly known as OpenOffice). Its clean interface and feature-rich tools help you unleash your creativity and enhance your productivity. paperless-ng paperless-ng is an application by Daniel Quinn and contributors that indexes your scanned documents and allows you to easily search for documents and store metadata alongside your documents.\" papermerge papermerge is an open source document management system (DMS) primarily designed for archiving and retrieving your digital documents. Instead of having piles of paper documents all over your desk, office or drawers - you can quickly scan them and configure your scanner to directly upload to Papermerge DMS.\"","title":"Documents"},{"location":"awesome-lsio/#downloaders","text":"Container Description deluge deluge is a lightweight, Free Software, cross-platform BitTorrent client. nntp2nntp nntp2nntp proxy allow you to use your NNTP Account from multiple systems, each with own user name and password. It fully supports SSL and you can also limit the access to proxy with SSL certificates. nntp2nntp proxy is very simple and pretty fast. nzbget nzbget is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources. pyload pyload is a Free and Open Source download manager written in Python and designed to be extremely lightweight, easily extensible and fully manageable via web. qbittorrent The qbittorrent project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library. sabnzbd sabnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction. transmission transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.","title":"Downloaders"},{"location":"awesome-lsio/#ftp","text":"Container Description davos davos is an FTP automation tool that periodically scans given host locations for new files. It can be configured for various purposes, including listening for specific files to appear in the host location, ready for it to download and then move, if required. It also supports completion notifications as well as downstream API calls, to further the workflow. filezilla FIleZilla Client is a fast and reliable cross-platform FTP, FTPS and SFTP client with lots of useful features and an intuitive graphical user interface.","title":"FTP"},{"location":"awesome-lsio/#family","text":"Container Description babybuddy babybuddy is a buddy for babies! Helps caregivers track sleep, feedings, diaper changes, tummy time and more to learn about and predict baby's needs without (as much) guess work.","title":"Family"},{"location":"awesome-lsio/#file-sharing","text":"Container Description projectsend projectsend is a self-hosted application that lets you upload files and assign them to specific clients that you create yourself. Secure, private and easy. No more depending on external services or e-mail to send those files. pwndrop pwndrop is a self-deployable file hosting service for sending out red teaming payloads or securely sharing your private files over HTTP and WebDAV. pydio-cells pydio-cells is the nextgen file sharing platform for organizations. It is a full rewrite of the Pydio project using the Go language following a micro-service architecture. snapdrop snapdrop A local file sharing in your browser. Inspired by Apple's Airdrop. xbackbone xbackbone is a simple, self-hosted, lightweight PHP file manager that support the instant sharing tool ShareX and *NIX systems. It supports uploading and displaying images, GIF, video, code, formatted text, and file downloading and uploading. Also have a web UI with multi user management, past uploads history and search support.","title":"File Sharing"},{"location":"awesome-lsio/#games","text":"Container Description emulatorjs emulatorjs - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS. minetest minetest (server) is a near-infinite-world block sandbox game and a game engine, inspired by InfiniMiner, Minecraft, and the like.","title":"Games"},{"location":"awesome-lsio/#irc","text":"Container Description limnoria limnoria A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot. ngircd ngircd is a free, portable and lightweight Internet Relay Chat server for small or private networks, developed under the GNU General Public License (GPL). It is easy to configure, can cope with dynamic IP addresses, and supports IPv6, SSL-protected connections as well as PAM for authentication. It is written from scratch and not based on the original IRCd. pidgin Pidgin is a chat program which lets you log into accounts on multiple chat networks simultaneously. This means that you can be chatting with friends on XMPP and sitting in an IRC channel at the same time. quassel-core quassel-core is a modern, cross-platform, distributed IRC client, meaning that one (or multiple) client(s) can attach to and detach from a central core. quassel-web quassel-web is a web client for Quassel. Note that a Quassel-Core instance is required, we have a container available here. thelounge thelounge (a fork of shoutIRC) is a web IRC client that you host on your own server. znc znc is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC.","title":"IRC"},{"location":"awesome-lsio/#indexers","text":"Container Description jackett jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps. nzbhydra2 nzbhydra2 is a meta search application for NZB indexers, the \"spiritual successor\" to NZBmegasearcH, and an evolution of the original application NZBHydra . prowlarr No description","title":"Indexers"},{"location":"awesome-lsio/#media-management","text":"Container Description bazarr bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you. couchpotato couchpotato is an automatic NZB and torrent downloader. You can keep a movies I want list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory. kodi-headless No description medusa medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic. radarr radarr - A fork of Sonarr to work with movies \u00e0 la Couchpotato. sickchill sickchill is an Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic. sickgear SickGear provides management of TV shows and/or Anime, it detects new episodes, links downloader apps, and more.. sonarr sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.","title":"Media Management"},{"location":"awesome-lsio/#media-players","text":"Container Description emby emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server. jellyfin jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it. plex plex organizes video, music and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone Plex Media Server. has always been a top priority. Straightforward design and bulk actions mean getting things done faster.","title":"Media Players"},{"location":"awesome-lsio/#media-requesters","text":"Container Description ombi ombi allows you to host your own Plex Request and user management system. overseerr overseerr is a request management and media discovery tool built to work with your existing Plex ecosystem. requestrr requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat.","title":"Media Requesters"},{"location":"awesome-lsio/#media-tools","text":"Container Description embystat embystat is a personal web server that can calculate all kinds of statistics from your (local) Emby server. Just install this on your server and let him calculate all kinds of fun stuff. ffmpeg No description htpcmanager htpcmanager is a front end for many htpc related applications. minisatip minisatip is a multi-threaded satip server version 1.2 that runs under Linux and it was tested with DVB-S, DVB-S2, DVB-T, DVB-T2, DVB-C, DVB-C2, ATSC and ISDB-T cards. oscam oscam is an Open Source Conditional Access Module software used for descrambling DVB transmissions using smart cards. It's both a server and a client. synclounge synclounge is a third party tool that allows you to watch Plex in sync with your friends/family, wherever you are. tautulli tautulli is a python based web application for monitoring, analytics and notifications for Plex Media Server. tvheadend tvheadend works as a proxy server: is a TV streaming server and recorder for Linux, FreeBSD and Android supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP and HDHomeRun as input sources. webgrabplus webgrabplus is a multi-site incremental xmltv epg grabber. It collects tv-program guide data from selected tvguide sites for your favourite channels.","title":"Media Tools"},{"location":"awesome-lsio/#monitor","text":"Container Description apprise-api apprise-api Takes advantage of Apprise through your network with a user-friendly API. diskover diskover is an open source file system indexer that uses Elasticsearch to index and manage data across heterogeneous storage systems. healthchecks healthchecks is a watchdog for your cron jobs. It's a web server that listens for pings from your cron jobs, plus a web interface. librespeed librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. scrutiny scrutiny WebUI for smartd S.M.A.R.T monitoring. Scrutiny is a Hard Drive Health Dashboard & Monitoring solution, merging manufacturer provided S.M.A.R.T metrics with real-world failure rates from Backblaze. smokeping smokeping keeps track of your network latency. For a full example of what this application is capable of visit UCDavis . syslog-ng syslog-ng allows you to flexibly collect, parse, classify, rewrite and correlate logs from across your infrastructure and store or route them to log analysis tools.","title":"Monitor"},{"location":"awesome-lsio/#music","text":"Container Description airsonic airsonic is a free, web-based media streamer, providing ubiquitious access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room. airsonic-advanced airsonic-advanced is a free, web-based media streamer, providing ubiquitious access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room. audacity Audacity is an easy-to-use, multi-track audio editor and recorder. Developed by a group of volunteers as open source. beets beets is a music library manager and not, for the most part, a music player. It does include a simple player plugin and an experimental Web-based player, but it generally leaves actual sound-reproduction to specialized tools. daapd daapd (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), Chromecast, MPD and internet radio. headphones headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, \u00b5Torrent and Blackhole. lidarr lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available. mstream mstream is a personal music streaming server. You can use mStream to stream your music from your home computer to any device, anywhere. There are mobile apps available for both Android and iPhone.","title":"Music"},{"location":"awesome-lsio/#network","text":"Container Description unifi-controller The unifi-controller Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance. wireshark Wireshark is the world\u2019s foremost and widely-used network protocol analyzer. It lets you see what\u2019s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998.","title":"Network"},{"location":"awesome-lsio/#photos","text":"Container Description chevereto chevereto is an image hosting software that allows you to create a beautiful and full-featured image hosting website on your own server. It's your hosting and your rules, so say goodbye to closures and restrictions. darktable darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoomable lighttable and enables you to develop raw images and enhance them. digikam digiKam : Professional Photo Management with the Power of Open Source lychee lychee is a free photo-management tool, which runs on your server or web-space. Installing is a matter of seconds. Upload, manage and share photos like from a native application. Lychee comes with everything you need and all your photos are stored securely.\" photoshow photoshow is gallery software at its easiest, it doesn't even require a database. piwigo piwigo is a photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures. pixapop pixapop is an open-source single page application to view your photos in the easiest way possible.","title":"Photos"},{"location":"awesome-lsio/#programming","text":"Container Description cloud9 cloud9 Cloud9 is a complete web based IDE with terminal access. This container is for running their core SDK locally and developing plugins. code-server code-server is VS Code running on a remote server, accessible through the browser. openvscode-server openvscode-server provides a version of VS Code that runs a server on a remote machine and allows access through a modern web browser. pylon pylon is a web based integrated development environment built with Node.js as a backend and with a supercharged JavaScript/HTML5 frontend, licensed under GPL version 3. This project originates from Cloud9 v2 project.","title":"Programming"},{"location":"awesome-lsio/#rss","text":"Container Description freshrss freshrss is a free, self-hostable aggregator for rss feeds.","title":"RSS"},{"location":"awesome-lsio/#recipes","text":"Container Description grocy grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility.","title":"Recipes"},{"location":"awesome-lsio/#remote","text":"Container Description guacd guacd - Apache Guacamole is a clientless remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH. This container is only the backend server component needed to use The official or 3rd party HTML5 frontends. rdesktop rdesktop - Ubuntu based containers containing full desktop environments in officially supported flavors accessible via RDP. remmina Remmina is a remote desktop client written in GTK, aiming to be useful for system administrators and travellers, who need to work with lots of remote computers in front of either large or tiny screens. Remmina supports multiple network protocols, in an integrated and consistent user interface. Currently RDP, VNC, SPICE, NX, XDMCP, SSH and EXEC are supported. webtop webtop - Alpine, Ubuntu, Fedora, and Arch based containers containing full desktop environments in officially supported flavors accessible via any modern web browser.","title":"Remote"},{"location":"awesome-lsio/#science","text":"Container Description boinc BOINC is a platform for high-throughput computing on a large scale (thousands or millions of computers). It can be used for volunteer computing (using consumer devices) or grid computing (using organizational resources). It supports virtualized, parallel, and GPU-based applications. foldingathome Folding@home is a distributed computing project for simulating protein dynamics, including the process of protein folding and the movements of proteins implicated in a variety of diseases. It brings together citizen scientists who volunteer to run simulations of protein dynamics on their personal computers. Insights from this data are helping scientists to better understand biology, and providing new opportunities for developing therapeutics.","title":"Science"},{"location":"awesome-lsio/#tools","text":"Container Description yq No description","title":"Tools"},{"location":"awesome-lsio/#vpn","text":"Container Description wireguard WireGuard\u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry.","title":"VPN"},{"location":"awesome-lsio/#web","text":"Container Description firefox Firefox Browser, also known as Mozilla Firefox or simply Firefox, is a free and open-source web browser developed by the Mozilla Foundation and its subsidiary, the Mozilla Corporation. Firefox uses the Gecko layout engine to render web pages, which implements current and anticipated web standards. grav grav is a Fast, Simple, and Flexible, file-based Web-platform. ipfs ipfs - A peer-to-peer hypermedia protocol designed to make the web faster, safer, and more open. nginx nginx is a simple webserver with php support. The config files reside in /config for easy user customization. swag SWAG - Secure Web Application Gateway (formerly known as letsencrypt, no relation to Let's Encrypt\u2122) sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let's Encrypt and ZeroSSL). It also contains fail2ban for intrusion prevention.","title":"Web"},{"location":"awesome-lsio/#wiki","text":"Container Description bookstack bookstack is a free and open source Wiki designed for creating beautiful documentation. Featuring a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease. dillinger dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor. dokuwiki dokuwiki is a simple to use and highly versatile Open Source wiki software that doesn't require a database. It is loved by users for its clean and readable syntax. The ease of maintenance, backup and integration makes it an administrator's favorite. Built in access controls and authentication connectors make DokuWiki especially useful in the enterprise context and the large number of plugins contributed by its vibrant community allow for a broad range of use cases beyond a traditional wiki. hedgedoc HedgeDoc gives you access to all your files wherever you are. raneto raneto - is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase. wikijs wikijs A modern, lightweight and powerful wiki app built on NodeJS.","title":"Wiki"},{"location":"consolidate/","text":"Consolidating Internal SWAG proxies It's possible to consolidate the majority of internal nginx proxies using mappings, these mappings get resolved when the mapped variables are used. Note - This doesn't work for every app since some require special configuration, but it works for most of them. Consolidated proxies map $internal_app $internal_port { babybuddy 8000 ; bazarr 6767 ; bitwarden 80 ; collabora 9980 ; drawio 8080 ; gitea 3000 ; heimdall 4443 ; lidarr 8686 ; mkdocs 8000 ; paperless 8000 ; photoview 80 ; podgrab 8080 ; prowlarr 9696 ; radarr 7878 ; scrutiny 8080 ; sonarr 8989 ; uptime 3001 ; youtubedl 8080 ; } map $internal_app $internal_proto { default http ; collabora https ; heimdall https ; } map $internal_app $internal_container { default $internal_app ; bazarr \"mullvad\" ; lidarr \"mullvad\" ; podgrab \"mullvad\" ; prowlarr \"mullvad\" ; radarr \"mullvad\" ; sonarr \"mullvad\" ; } server { listen 443 ssl ; server_name ~ ^(?<internal_app>.*?)\\..*$; include /config/nginx/ssl.conf ; client_max_body_size 0 ; if ( $lan-ip = no) { return 404 ; } location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; proxy_pass $internal_proto://$internal_container:$internal_port ; } } Explanation We created 3 mappings: map $internal_app $internal_container - app name to the container name, with the app name by default. map $internal_app $internal_proto - app name to the protocol, with http by default. map $internal_app $internal_port - app name to the app port, with no default. When a request comes in, it gets processed by the regular expression ~^(?<internal_app>.*?)\\..*$ which sets $internal_app with the subdomain, for example radarr in the case of radarr.domain.com . It then checks if the request is local, which requires defining what is the local network . The final part: proxy_pass $internal_proto://$internal_container:$internal_port figures out where to proxy the request based on the $internal_app variable, for example radarr gets proxied to http://radarr:7878 .","title":"Consolidating Proxies"},{"location":"consolidate/#consolidating-internal-swag-proxies","text":"It's possible to consolidate the majority of internal nginx proxies using mappings, these mappings get resolved when the mapped variables are used. Note - This doesn't work for every app since some require special configuration, but it works for most of them.","title":"Consolidating Internal SWAG proxies"},{"location":"consolidate/#consolidated-proxies","text":"map $internal_app $internal_port { babybuddy 8000 ; bazarr 6767 ; bitwarden 80 ; collabora 9980 ; drawio 8080 ; gitea 3000 ; heimdall 4443 ; lidarr 8686 ; mkdocs 8000 ; paperless 8000 ; photoview 80 ; podgrab 8080 ; prowlarr 9696 ; radarr 7878 ; scrutiny 8080 ; sonarr 8989 ; uptime 3001 ; youtubedl 8080 ; } map $internal_app $internal_proto { default http ; collabora https ; heimdall https ; } map $internal_app $internal_container { default $internal_app ; bazarr \"mullvad\" ; lidarr \"mullvad\" ; podgrab \"mullvad\" ; prowlarr \"mullvad\" ; radarr \"mullvad\" ; sonarr \"mullvad\" ; } server { listen 443 ssl ; server_name ~ ^(?<internal_app>.*?)\\..*$; include /config/nginx/ssl.conf ; client_max_body_size 0 ; if ( $lan-ip = no) { return 404 ; } location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; proxy_pass $internal_proto://$internal_container:$internal_port ; } }","title":"Consolidated proxies"},{"location":"consolidate/#explanation","text":"We created 3 mappings: map $internal_app $internal_container - app name to the container name, with the app name by default. map $internal_app $internal_proto - app name to the protocol, with http by default. map $internal_app $internal_port - app name to the app port, with no default. When a request comes in, it gets processed by the regular expression ~^(?<internal_app>.*?)\\..*$ which sets $internal_app with the subdomain, for example radarr in the case of radarr.domain.com . It then checks if the request is local, which requires defining what is the local network . The final part: proxy_pass $internal_proto://$internal_container:$internal_port figures out where to proxy the request based on the $internal_app variable, for example radarr gets proxied to http://radarr:7878 .","title":"Explanation"},{"location":"nextcloud/","text":"Optimizing Nextcloud The following is a collection of ways to optimize Nextcloud's performance and responsiveness. Optimization Steps Use the LSIO image , not the official Use the php8 tag Enable redis Use mariadb (alpine) or postgres Use nextcloud v22 or higher Add the following to /config/php/php-local.ini memory_limit = -1 opcache.enable = 1 opcache.enable_cli = 1 opcache.interned_strings_buffer = 8 opcache.max_accelerated_files = 10000 opcache.memory_consumption = 128 opcache.save_comments = 1 opcache.revalidate_freq = 1 Add the following to /config/php/www2.conf pm = dynamic pm.max_children = 120 pm.start_servers = 12 pm.min_spare_servers = 6 pm.max_spare_servers = 18 Disable Dark Reader extension on it, if you use it For Nextcloud to identify filesystem changes, add the following to the config: 'filesystem_check_changes' => 1 , Example Nextcloud Config Located in /config/www/nextcloud/config/config.php 'dbname' => 'nextcloud' , 'dbhost' => 'mariadb' , 'dbport' => '' , 'dbtableprefix' => 'oc_' , 'mysql.utf8mb4' => true , 'dbuser' => 'nextcloud_user' , 'dbpassword' => 'DATABASE_PASSWORD' , 'filesystem_check_changes' => 1 , 'memcache.local' => '\\\\OC\\\\Memcache\\\\APCu' , 'memcache.distributed' => '\\\\OC\\\\Memcache\\\\Redis' , 'memcache.locking' => '\\\\OC\\\\Memcache\\\\Redis' , 'redis' => array ( 'host' => 'redis' , 'port' => 6379 , ), Example Compose nextcloud : image : ghcr.io/linuxserver/nextcloud:php8 container_name : nextcloud environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata:/config - /path/to/data:/data restart : unless-stopped depends_on : - mariadb - redis redis : image : redis:alpine container_name : redis restart : unless-stopped mariadb : image : ghcr.io/linuxserver/mariadb container_name : mariadb environment : - PUID=1000 - PGID=1000 - TZ=Europe/London - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud_user - MYSQL_PASSWORD=DATABASE_PASSWORD - MYSQL_ROOT_PASSWORD=ROOT_ACCESS_PASSWORD volumes : - /path/to/appdata:/config restart : unless-stopped","title":"Optimizing Nextcloud"},{"location":"nextcloud/#optimizing-nextcloud","text":"The following is a collection of ways to optimize Nextcloud's performance and responsiveness.","title":"Optimizing Nextcloud"},{"location":"nextcloud/#optimization-steps","text":"Use the LSIO image , not the official Use the php8 tag Enable redis Use mariadb (alpine) or postgres Use nextcloud v22 or higher Add the following to /config/php/php-local.ini memory_limit = -1 opcache.enable = 1 opcache.enable_cli = 1 opcache.interned_strings_buffer = 8 opcache.max_accelerated_files = 10000 opcache.memory_consumption = 128 opcache.save_comments = 1 opcache.revalidate_freq = 1 Add the following to /config/php/www2.conf pm = dynamic pm.max_children = 120 pm.start_servers = 12 pm.min_spare_servers = 6 pm.max_spare_servers = 18 Disable Dark Reader extension on it, if you use it For Nextcloud to identify filesystem changes, add the following to the config: 'filesystem_check_changes' => 1 ,","title":"Optimization Steps"},{"location":"nextcloud/#example-nextcloud-config","text":"Located in /config/www/nextcloud/config/config.php 'dbname' => 'nextcloud' , 'dbhost' => 'mariadb' , 'dbport' => '' , 'dbtableprefix' => 'oc_' , 'mysql.utf8mb4' => true , 'dbuser' => 'nextcloud_user' , 'dbpassword' => 'DATABASE_PASSWORD' , 'filesystem_check_changes' => 1 , 'memcache.local' => '\\\\OC\\\\Memcache\\\\APCu' , 'memcache.distributed' => '\\\\OC\\\\Memcache\\\\Redis' , 'memcache.locking' => '\\\\OC\\\\Memcache\\\\Redis' , 'redis' => array ( 'host' => 'redis' , 'port' => 6379 , ),","title":"Example Nextcloud Config"},{"location":"nextcloud/#example-compose","text":"nextcloud : image : ghcr.io/linuxserver/nextcloud:php8 container_name : nextcloud environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata:/config - /path/to/data:/data restart : unless-stopped depends_on : - mariadb - redis redis : image : redis:alpine container_name : redis restart : unless-stopped mariadb : image : ghcr.io/linuxserver/mariadb container_name : mariadb environment : - PUID=1000 - PGID=1000 - TZ=Europe/London - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud_user - MYSQL_PASSWORD=DATABASE_PASSWORD - MYSQL_ROOT_PASSWORD=ROOT_ACCESS_PASSWORD volumes : - /path/to/appdata:/config restart : unless-stopped","title":"Example Compose"},{"location":"piped/","text":"Piped - Getting Started Piped is an alternative YouTube frontend which is efficient by design. Compose Create the following containers: pipeddb : image : postgres:13-alpine container_name : pipeddb volumes : - /path/to/pipeddb:/var/lib/postgresql/data environment : - POSTGRES_DB=piped - POSTGRES_USER=piped - POSTGRES_PASSWORD=<PASSWORD> # Set a database password restart : always pipedproxy : image : 1337kavin/ytproxy container_name : pipedproxy user : \"1000:1000\" # Replace with the user and group IDs volumes : - /path/to/pipedproxy:/app/socket restart : always pipedfe : image : 1337kavin/piped-frontend container_name : pipedfe # Replace pipedapi.mydomain.com with the API subdomain entrypoint : ash -c 'sed -i s/pipedapi.kavin.rocks/pipedapi.mydomain.com/g /usr/share/nginx/html/js/* && /docker-entrypoint.sh && nginx -g \"daemon off;\"' restart : always pipedapi : image : 1337kavin/piped container_name : pipedapi volumes : - /path/to/piped/config.properties:/app/config.properties:ro restart : always You may need to chown -R 1000:1000 /path/to/pipedproxy with your user and group ID. Configuration Set the following configuration in /path/to/piped/config.properties : # The port to Listen on. PORT : 8080 # The number of workers to use for the server HTTP_WORKERS : 2 # Proxy PROXY_PART : https://pipedproxy.mydomain.com # Outgoing HTTP Proxy - eg: 127.0.0.1:8118 #HTTP_PROXY: 127.0.0.1:8118 FRONTEND_URL : https://piped.mydomain.com # Captcha Parameters #CAPTCHA_BASE_URL: https://api.capmonster.cloud/ #CAPTCHA_API_KEY: INSERT_HERE # Public API URL API_URL : https://pipedapi.mydomain.com # Hibernate properties hibernate.connection.url : jdbc:postgresql://pipeddb:5432/piped hibernate.connection.driver_class : org.postgresql.Driver hibernate.dialect : org.hibernate.dialect.PostgreSQL10Dialect hibernate.connection.username : piped hibernate.connection.password : <PASSWORD> # Replace with the database password Reverse Proxy server { listen 443 ssl ; server_name piped.mydomain.com ; # Set the API domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app pipedfe ; set $upstream_port 80 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } server { listen 443 ssl ; server_name pipedapi.mydomain.com ; # Set the frontend domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app pipedapi ; set $upstream_port 8080 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } server { listen 443 ssl ; server_name pipedproxy.mydomain.com ; # Set the proxy domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location ~ (/videoplayback|/api/v4/|/api/manifest/) { proxy_pass http://unix:/var/run/ytproxy/http-proxy.sock ; add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Headers * ; if ( $request_method = OPTIONS ) { return 200 ; } proxy_buffering on ; proxy_set_header Host $arg_host ; proxy_ssl_server_name on ; proxy_set_header X-Forwarded-For \"\" ; proxy_set_header CF-Connecting-IP \"\" ; proxy_hide_header \"alt-svc\" ; sendfile on ; sendfile_max_chunk 512k ; tcp_nopush on ; aio threads=default ; aio_write on ; directio 2m ; proxy_hide_header Cache-Control ; proxy_hide_header etag ; proxy_http_version 1 .1 ; proxy_set_header Connection keep-alive ; proxy_max_temp_file_size 0 ; access_log off ; add_header Cache-Control private always ; proxy_hide_header Access-Control-Allow-Origin ; } location / { proxy_pass http://unix:/var/run/ytproxy/http-proxy.sock ; add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Headers * ; if ( $request_method = OPTIONS ) { return 200 ; } proxy_buffering on ; proxy_set_header Host $arg_host ; proxy_ssl_server_name on ; proxy_set_header X-Forwarded-For \"\" ; proxy_set_header CF-Connecting-IP \"\" ; proxy_hide_header \"alt-svc\" ; sendfile on ; sendfile_max_chunk 512k ; tcp_nopush on ; aio threads=default ; aio_write on ; directio 2m ; proxy_hide_header Cache-Control ; proxy_hide_header etag ; proxy_http_version 1 .1 ; proxy_set_header Connection keep-alive ; proxy_max_temp_file_size 0 ; access_log off ; add_header Cache-Control \"public, max-age=604800\" ; proxy_hide_header Access-Control-Allow-Origin ; } }","title":"Piped"},{"location":"piped/#piped-getting-started","text":"Piped is an alternative YouTube frontend which is efficient by design.","title":"Piped - Getting Started"},{"location":"piped/#compose","text":"Create the following containers: pipeddb : image : postgres:13-alpine container_name : pipeddb volumes : - /path/to/pipeddb:/var/lib/postgresql/data environment : - POSTGRES_DB=piped - POSTGRES_USER=piped - POSTGRES_PASSWORD=<PASSWORD> # Set a database password restart : always pipedproxy : image : 1337kavin/ytproxy container_name : pipedproxy user : \"1000:1000\" # Replace with the user and group IDs volumes : - /path/to/pipedproxy:/app/socket restart : always pipedfe : image : 1337kavin/piped-frontend container_name : pipedfe # Replace pipedapi.mydomain.com with the API subdomain entrypoint : ash -c 'sed -i s/pipedapi.kavin.rocks/pipedapi.mydomain.com/g /usr/share/nginx/html/js/* && /docker-entrypoint.sh && nginx -g \"daemon off;\"' restart : always pipedapi : image : 1337kavin/piped container_name : pipedapi volumes : - /path/to/piped/config.properties:/app/config.properties:ro restart : always You may need to chown -R 1000:1000 /path/to/pipedproxy with your user and group ID.","title":"Compose"},{"location":"piped/#configuration","text":"Set the following configuration in /path/to/piped/config.properties : # The port to Listen on. PORT : 8080 # The number of workers to use for the server HTTP_WORKERS : 2 # Proxy PROXY_PART : https://pipedproxy.mydomain.com # Outgoing HTTP Proxy - eg: 127.0.0.1:8118 #HTTP_PROXY: 127.0.0.1:8118 FRONTEND_URL : https://piped.mydomain.com # Captcha Parameters #CAPTCHA_BASE_URL: https://api.capmonster.cloud/ #CAPTCHA_API_KEY: INSERT_HERE # Public API URL API_URL : https://pipedapi.mydomain.com # Hibernate properties hibernate.connection.url : jdbc:postgresql://pipeddb:5432/piped hibernate.connection.driver_class : org.postgresql.Driver hibernate.dialect : org.hibernate.dialect.PostgreSQL10Dialect hibernate.connection.username : piped hibernate.connection.password : <PASSWORD> # Replace with the database password","title":"Configuration"},{"location":"piped/#reverse-proxy","text":"server { listen 443 ssl ; server_name piped.mydomain.com ; # Set the API domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app pipedfe ; set $upstream_port 80 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } server { listen 443 ssl ; server_name pipedapi.mydomain.com ; # Set the frontend domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app pipedapi ; set $upstream_port 8080 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } server { listen 443 ssl ; server_name pipedproxy.mydomain.com ; # Set the proxy domain include /config/nginx/ssl.conf ; client_max_body_size 0 ; location ~ (/videoplayback|/api/v4/|/api/manifest/) { proxy_pass http://unix:/var/run/ytproxy/http-proxy.sock ; add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Headers * ; if ( $request_method = OPTIONS ) { return 200 ; } proxy_buffering on ; proxy_set_header Host $arg_host ; proxy_ssl_server_name on ; proxy_set_header X-Forwarded-For \"\" ; proxy_set_header CF-Connecting-IP \"\" ; proxy_hide_header \"alt-svc\" ; sendfile on ; sendfile_max_chunk 512k ; tcp_nopush on ; aio threads=default ; aio_write on ; directio 2m ; proxy_hide_header Cache-Control ; proxy_hide_header etag ; proxy_http_version 1 .1 ; proxy_set_header Connection keep-alive ; proxy_max_temp_file_size 0 ; access_log off ; add_header Cache-Control private always ; proxy_hide_header Access-Control-Allow-Origin ; } location / { proxy_pass http://unix:/var/run/ytproxy/http-proxy.sock ; add_header Access-Control-Allow-Origin * ; add_header Access-Control-Allow-Headers * ; if ( $request_method = OPTIONS ) { return 200 ; } proxy_buffering on ; proxy_set_header Host $arg_host ; proxy_ssl_server_name on ; proxy_set_header X-Forwarded-For \"\" ; proxy_set_header CF-Connecting-IP \"\" ; proxy_hide_header \"alt-svc\" ; sendfile on ; sendfile_max_chunk 512k ; tcp_nopush on ; aio threads=default ; aio_write on ; directio 2m ; proxy_hide_header Cache-Control ; proxy_hide_header etag ; proxy_http_version 1 .1 ; proxy_set_header Connection keep-alive ; proxy_max_temp_file_size 0 ; access_log off ; add_header Cache-Control \"public, max-age=604800\" ; proxy_hide_header Access-Control-Allow-Origin ; } }","title":"Reverse Proxy"},{"location":"searx/","text":"Searx Searx is a free metasearch engine with the aim of protecting the privacy of its users. To this end, Searx does not share users' IP addresses or search history with the search engines from which it gathers results. Tracking cookies served by the search engines are blocked, preventing user-profiling-based results modification. Installation Compose searx : image : searxng/searxng container_name : searx volumes : - /path/to/searx:/etc/searx environment : - BASE_URL=https://search.yourdomain.com/ - INSTANCE_NAME=Searx ports : - 8080:8080 restart : always Reverse Proxy server { listen 443 ssl ; server_name search.yourdomain.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app searx ; set $upstream_port 8080 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Settings The settings file is /path/to/searx/settings.yml , it can seem overwhelming but the majority of it are the search engine configuration which can be enabled/disabled from the UI. These settings may require changing in the file: general : instance_name : \"Searx\" # The name that is displayed search : safe_search : 1 # Otherwise you may get inappropriate image results autocomplete : \"google\" # Or one of the other autocomplete sources server : secret_key : \"MUST CHANGE THIS\" http_protocol_version : \"1.1\" ui : advanced_search : true # Show the advanced options by default theme_args : oscar_style : logicodev-dark # Dark theme enabled_plugins : # Enable plugins https://searx.github.io/searx/admin/plugins.html?highlight=plugins - \"Infinite scroll\" - \"Tracker URL remover\" - \"Search on category select\" - \"Hash plugin\" - \"Self Informations\" engines : - name : <some engine> disabled : true # To disable any engine by default, add this line to it Morty Proxy (Optional) Morty rewrites web pages to exclude malicious HTML tags and attributes. It also replaces external resource references to prevent third party information leaks. Compose morty : image : dalf/morty container_name : morty environment : - MORTY_ADDRESS=0.0.0.0:3000 - DEBUG=false ports : - 3000:3000 restart : always Reverse Proxy server { listen 443 ssl ; server_name proxy.yourdomain.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app morty ; set $upstream_port 3000 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Settings Enable the proxy with the following settings: server : image_proxy : true result_proxy : url : https://proxy.yourdomain.com/ Filtron (Optional) If you want to make your instance public, you may want to configure Filtron , I won't go into it.","title":"Searx"},{"location":"searx/#searx","text":"Searx is a free metasearch engine with the aim of protecting the privacy of its users. To this end, Searx does not share users' IP addresses or search history with the search engines from which it gathers results. Tracking cookies served by the search engines are blocked, preventing user-profiling-based results modification.","title":"Searx"},{"location":"searx/#installation","text":"","title":"Installation"},{"location":"searx/#compose","text":"searx : image : searxng/searxng container_name : searx volumes : - /path/to/searx:/etc/searx environment : - BASE_URL=https://search.yourdomain.com/ - INSTANCE_NAME=Searx ports : - 8080:8080 restart : always","title":"Compose"},{"location":"searx/#reverse-proxy","text":"server { listen 443 ssl ; server_name search.yourdomain.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app searx ; set $upstream_port 8080 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } }","title":"Reverse Proxy"},{"location":"searx/#settings","text":"The settings file is /path/to/searx/settings.yml , it can seem overwhelming but the majority of it are the search engine configuration which can be enabled/disabled from the UI. These settings may require changing in the file: general : instance_name : \"Searx\" # The name that is displayed search : safe_search : 1 # Otherwise you may get inappropriate image results autocomplete : \"google\" # Or one of the other autocomplete sources server : secret_key : \"MUST CHANGE THIS\" http_protocol_version : \"1.1\" ui : advanced_search : true # Show the advanced options by default theme_args : oscar_style : logicodev-dark # Dark theme enabled_plugins : # Enable plugins https://searx.github.io/searx/admin/plugins.html?highlight=plugins - \"Infinite scroll\" - \"Tracker URL remover\" - \"Search on category select\" - \"Hash plugin\" - \"Self Informations\" engines : - name : <some engine> disabled : true # To disable any engine by default, add this line to it","title":"Settings"},{"location":"searx/#morty-proxy-optional","text":"Morty rewrites web pages to exclude malicious HTML tags and attributes. It also replaces external resource references to prevent third party information leaks.","title":"Morty Proxy (Optional)"},{"location":"searx/#compose_1","text":"morty : image : dalf/morty container_name : morty environment : - MORTY_ADDRESS=0.0.0.0:3000 - DEBUG=false ports : - 3000:3000 restart : always","title":"Compose"},{"location":"searx/#reverse-proxy_1","text":"server { listen 443 ssl ; server_name proxy.yourdomain.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app morty ; set $upstream_port 3000 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } }","title":"Reverse Proxy"},{"location":"searx/#settings_1","text":"Enable the proxy with the following settings: server : image_proxy : true result_proxy : url : https://proxy.yourdomain.com/","title":"Settings"},{"location":"searx/#filtron-optional","text":"If you want to make your instance public, you may want to configure Filtron , I won't go into it.","title":"Filtron (Optional)"},{"location":"secure/","text":"Securing SWAG SWAG - Secure Web Application Gateway (formerly known as linuxserver/letsencrypt) is a full fledged web server and reverse proxy with Nginx, PHP7, Certbot (Let's Encrypt\u2122 client) and Fail2Ban built in. SWAG allows you to expose applications to the internet, doing so comes with a risk and there are security measures that help reduce that risk. This article details how to configure SWAG and enhance it's security. Requirements A working instance of SWAG Monitor SWAG Use monitoring solutions such as SWAG Dashboard to keep an eye on the traffic going through SWAG and check for suspicious activity such as: A lot of hits from a country unrelated to your users A lot of requests to a specific page or static file Referers that shouldn't refer to your domain A lot of hits on status codes that are not 2xx Internal Applications Internal applications can be proxied through SWAG in order to use app.mydomain.com instead of ip:port, and block them externally so only your local network could access them. Create a file called nginx/internal.conf with the following configuration: allow 192 .168.1.0/24 ; #Replace with your LAN subnet deny all ; Utilize the lan filter in your configuration by adding the following line inside every location block for every application you want to protect. include /config/nginx/internal.conf; Example: server { listen 443 ssl ; listen [::]:443 ssl ; server_name collabora.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/internal.conf ; include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app collabora ; set $upstream_port 9980 ; set $upstream_proto https ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Repeat the process for all internal applications and for every location block. One way to securely access internal applications from the internet is through a VPN, for example WireGuard: WireGuard Container WireGuard on OPNSense Fail2Ban Fail2Ban is an intrusion prevention software that protects external applications from brute-force attacks. Attackers that fail to login to your applications a certain number of times will get blocked from accessing all of your applications. Fail2Ban looks for failed login attempts in log files, counts the failed attempts in a short period, and bans the IP address of the attacker. Mount the application logs to SWAG's container by adding a volume for the log to the compose yaml: - /path/to/nextcloud/nextcloud.log:/nextcloud/nextcloud.log:ro If the application has multiple log files with dates, mount the entire folder: - /path/to/jellyfin/log:/jellyfin:ro Recreate the container with the log mount, then create a file called nextcloud.local under fail2ban/filter.d : [Definition] failregex=^.*Login failed: '?.*'? \\(Remote IP: '?<ADDR>'?\\).* $ ^.*\\\"remoteAddr\\\":\\\"<ADDR>\\\".*Trusted domain error.* $ ignoreregex = The configuration file containes a pattern by which failed login attempts are matched. Test the pattern by failing to login to nextcloud and look for the entry corresponding to your failed attempt. {\"reqId\":\"k5j5H7K3eskXt3hCLSc4i\",\"level\":2,\"time\":\"2020-10-14T22:56:14+00:00\",\"remoteAddr\":\"1.2.3.4\",\"user\":\"--\", \"app\":\"no app in context\",\"method\":\"POST\",\"url\":\"/login\",\"message\":\"Login failed: username (Remote IP: 5.5.5.5)\", \"userAgent\":\"Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/5.6.7.8 Mobile Safari/537.36\",\"version\":\"19.0.4.2\"} Test the pattern in nextcloud.local by running the following command on the docker host: docker exec swag fail2ban-regex /nextcloud/nextcloud.log /config/fail2ban/filter.d/nextcloud.local If the pattern works, you will see matches corresponding to the amount of failed login attempts: Lines: 92377 lines, 0 ignored, 2 matched, 92375 missed [processed in 7.51 sec] The final step is to activate the jail, add the following to fail2ban/jail.local : [nextcloud] enabled = true port = http,https filter = nextcloud logpath = /nextcloud/nextcloud.log action = iptables-allports[name=nextcloud] The logpath is slightly different for applications that have multiple log files with dates: [jellyfin] enabled = true filter = jellyfin port = http,https logpath = /jellyfin/log*.log action = iptables-allports[name=jellyfin] Repeat the process for every external application, you can find Fail2Ban configurations for most applications on the internet. If you need to unban an IP address that was blocked, run the following command on the docker host: docker exec swag fail2ban-client unban <ip address> This great mod sends a discord notification when Fail2Ban blocks an attack: f2bdiscord . Geoblock Geoblock reduces the attack surface of SWAG by restricting access based on countries. Enable geoblock using either DBIP mod or Maxmind mod , follow the mod's instructions to set it up. The mods come with 3 definitions for $geo-whitelist , $geo-blacklist , $lan-ip . An example for allowing a single country: map $geoip2_data_country_iso_code $geo-whitelist { default no ; UK yes ; #Replace with your country code list https://dev.maxmind.com/geoip/legacy/codes/iso3166/ } An example for blocking high risk countries: (GilbN's list based on the Spamhaus statistics and Aakamai\u2019s state of the internet report) map $geoip2_data_country_iso_code $geo-blacklist { default yes ; #If your country is listed below, remove it from the list CN no ; #China RU no ; #Russia HK no ; #Hong Kong IN no ; #India IR no ; #Iran VN no ; #Vietnam TR no ; #Turkey EG no ; #Egypt MX no ; #Mexico JP no ; #Japan KR no ; #South Korea KP no ; #North Korea PE no ; #Peru BR no ; #Brazil UA no ; #Ukraine ID no ; #Indonesia TH no ; #Thailand } Utilize the geoblock in your configuration by adding one of the following lines above your location section in every application you want to protect. Note that when using a whitelist filter, you also need to check if the source is a LAN IP, it's not required when using a blacklist filter. if ( $lan-ip = yes) { set $geo-whitelist yes ; } if ( $geo-whitelist = no) { return 404 ; } Or if ( $geo-blacklist = no) { return 404 ; } Example: server { listen 443 ssl ; listen [::]:443 ssl ; server_name authelia.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; if ( $lan-ip = yes) { set $geo-whitelist yes ; } #Check for a LAN IP if ( $geo-whitelist = no) { return 404 ; } #Check the country filter location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app authelia ; set $upstream_port 9091 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Add the lines to every external application based on your needs. NGINX Configuration Google FLoC Google will track any user visiting your website even if it doesn't have Google analytics or any other services related to Google. One easy way for users visiting websites to opt out of this is to not use Google Chrome and use browsers like Firefox, etc. However, website maintainers can also help against this new tracking technology by opting out of the FLoC network. Add the following config line to ssl.conf to opt out: add_header Permissions-Policy \"interest-cohort=()\"; X-Robots-Tag You can prevent applications from appearing in results of search engines and web crawlers, regardless of whether other sites link to it. It doesn't work on all search engines and web crawlers, but it significantly reduces the amount. Add the X-Robots-Tag config line to ssl.conf to enable it on all of your applications: add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\"; Disable on a specific application and allow search engines to display it by add the following line to the application config inside the server tag: add_header X-Robots-Tag \"\"; HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism that helps to protect websites against man-in-the-middle attacks such as protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should automatically interact with it using only HTTPS connections, which provide Transport Layer Security (TLS/SSL), unlike the insecure HTTP used alone. HSTS requires a working SSL certificate on your domains before enabling it. Enable HSTS by uncommenting the HSTS config line in ssl.conf: add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always; Optional - Strengthening HSTS After enabling the HSTS header, users are still vulnerable to attack if they access an HSTS\u2011protected website over HTTP when they have: Never before visited the site Recently reinstalled their operating system Recently reinstalled their browser Switched to a new browser Switched to a new device (for example, mobile phone) Deleted their browser\u2019s cache Not visited the site recently and the max-age time has passed To address this, Google maintains a \u201cHSTS preload list\u201d of web domains and subdomains that use HSTS and have submitted their names to HSTS Preload . This domain list is distributed and hardcoded into major web browsers. Clients that access web domains in this list automatically use HTTPS and refuse to access the site using HTTP. Be aware that once you set the STS header or submit your domains to the HSTS preload list, it is impossible to remove it. It\u2019s a one\u2011way decision to make your domains available over HTTPS. Authelia Authelia is an open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal. Refer to this blog post to configure Authelia .","title":"Securing SWAG"},{"location":"secure/#securing-swag","text":"SWAG - Secure Web Application Gateway (formerly known as linuxserver/letsencrypt) is a full fledged web server and reverse proxy with Nginx, PHP7, Certbot (Let's Encrypt\u2122 client) and Fail2Ban built in. SWAG allows you to expose applications to the internet, doing so comes with a risk and there are security measures that help reduce that risk. This article details how to configure SWAG and enhance it's security.","title":"Securing SWAG"},{"location":"secure/#requirements","text":"A working instance of SWAG","title":"Requirements"},{"location":"secure/#monitor-swag","text":"Use monitoring solutions such as SWAG Dashboard to keep an eye on the traffic going through SWAG and check for suspicious activity such as: A lot of hits from a country unrelated to your users A lot of requests to a specific page or static file Referers that shouldn't refer to your domain A lot of hits on status codes that are not 2xx","title":"Monitor SWAG"},{"location":"secure/#internal-applications","text":"Internal applications can be proxied through SWAG in order to use app.mydomain.com instead of ip:port, and block them externally so only your local network could access them. Create a file called nginx/internal.conf with the following configuration: allow 192 .168.1.0/24 ; #Replace with your LAN subnet deny all ; Utilize the lan filter in your configuration by adding the following line inside every location block for every application you want to protect. include /config/nginx/internal.conf; Example: server { listen 443 ssl ; listen [::]:443 ssl ; server_name collabora.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/internal.conf ; include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app collabora ; set $upstream_port 9980 ; set $upstream_proto https ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Repeat the process for all internal applications and for every location block. One way to securely access internal applications from the internet is through a VPN, for example WireGuard: WireGuard Container WireGuard on OPNSense","title":"Internal Applications"},{"location":"secure/#fail2ban","text":"Fail2Ban is an intrusion prevention software that protects external applications from brute-force attacks. Attackers that fail to login to your applications a certain number of times will get blocked from accessing all of your applications. Fail2Ban looks for failed login attempts in log files, counts the failed attempts in a short period, and bans the IP address of the attacker. Mount the application logs to SWAG's container by adding a volume for the log to the compose yaml: - /path/to/nextcloud/nextcloud.log:/nextcloud/nextcloud.log:ro If the application has multiple log files with dates, mount the entire folder: - /path/to/jellyfin/log:/jellyfin:ro Recreate the container with the log mount, then create a file called nextcloud.local under fail2ban/filter.d : [Definition] failregex=^.*Login failed: '?.*'? \\(Remote IP: '?<ADDR>'?\\).* $ ^.*\\\"remoteAddr\\\":\\\"<ADDR>\\\".*Trusted domain error.* $ ignoreregex = The configuration file containes a pattern by which failed login attempts are matched. Test the pattern by failing to login to nextcloud and look for the entry corresponding to your failed attempt. {\"reqId\":\"k5j5H7K3eskXt3hCLSc4i\",\"level\":2,\"time\":\"2020-10-14T22:56:14+00:00\",\"remoteAddr\":\"1.2.3.4\",\"user\":\"--\", \"app\":\"no app in context\",\"method\":\"POST\",\"url\":\"/login\",\"message\":\"Login failed: username (Remote IP: 5.5.5.5)\", \"userAgent\":\"Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/5.6.7.8 Mobile Safari/537.36\",\"version\":\"19.0.4.2\"} Test the pattern in nextcloud.local by running the following command on the docker host: docker exec swag fail2ban-regex /nextcloud/nextcloud.log /config/fail2ban/filter.d/nextcloud.local If the pattern works, you will see matches corresponding to the amount of failed login attempts: Lines: 92377 lines, 0 ignored, 2 matched, 92375 missed [processed in 7.51 sec] The final step is to activate the jail, add the following to fail2ban/jail.local : [nextcloud] enabled = true port = http,https filter = nextcloud logpath = /nextcloud/nextcloud.log action = iptables-allports[name=nextcloud] The logpath is slightly different for applications that have multiple log files with dates: [jellyfin] enabled = true filter = jellyfin port = http,https logpath = /jellyfin/log*.log action = iptables-allports[name=jellyfin] Repeat the process for every external application, you can find Fail2Ban configurations for most applications on the internet. If you need to unban an IP address that was blocked, run the following command on the docker host: docker exec swag fail2ban-client unban <ip address> This great mod sends a discord notification when Fail2Ban blocks an attack: f2bdiscord .","title":"Fail2Ban"},{"location":"secure/#geoblock","text":"Geoblock reduces the attack surface of SWAG by restricting access based on countries. Enable geoblock using either DBIP mod or Maxmind mod , follow the mod's instructions to set it up. The mods come with 3 definitions for $geo-whitelist , $geo-blacklist , $lan-ip . An example for allowing a single country: map $geoip2_data_country_iso_code $geo-whitelist { default no ; UK yes ; #Replace with your country code list https://dev.maxmind.com/geoip/legacy/codes/iso3166/ } An example for blocking high risk countries: (GilbN's list based on the Spamhaus statistics and Aakamai\u2019s state of the internet report) map $geoip2_data_country_iso_code $geo-blacklist { default yes ; #If your country is listed below, remove it from the list CN no ; #China RU no ; #Russia HK no ; #Hong Kong IN no ; #India IR no ; #Iran VN no ; #Vietnam TR no ; #Turkey EG no ; #Egypt MX no ; #Mexico JP no ; #Japan KR no ; #South Korea KP no ; #North Korea PE no ; #Peru BR no ; #Brazil UA no ; #Ukraine ID no ; #Indonesia TH no ; #Thailand } Utilize the geoblock in your configuration by adding one of the following lines above your location section in every application you want to protect. Note that when using a whitelist filter, you also need to check if the source is a LAN IP, it's not required when using a blacklist filter. if ( $lan-ip = yes) { set $geo-whitelist yes ; } if ( $geo-whitelist = no) { return 404 ; } Or if ( $geo-blacklist = no) { return 404 ; } Example: server { listen 443 ssl ; listen [::]:443 ssl ; server_name authelia.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; if ( $lan-ip = yes) { set $geo-whitelist yes ; } #Check for a LAN IP if ( $geo-whitelist = no) { return 404 ; } #Check the country filter location / { include /config/nginx/proxy.conf ; include /config/nginx/resolver.conf ; set $upstream_app authelia ; set $upstream_port 9091 ; set $upstream_proto http ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Add the lines to every external application based on your needs.","title":"Geoblock"},{"location":"secure/#nginx-configuration","text":"","title":"NGINX Configuration"},{"location":"secure/#google-floc","text":"Google will track any user visiting your website even if it doesn't have Google analytics or any other services related to Google. One easy way for users visiting websites to opt out of this is to not use Google Chrome and use browsers like Firefox, etc. However, website maintainers can also help against this new tracking technology by opting out of the FLoC network. Add the following config line to ssl.conf to opt out: add_header Permissions-Policy \"interest-cohort=()\";","title":"Google FLoC"},{"location":"secure/#x-robots-tag","text":"You can prevent applications from appearing in results of search engines and web crawlers, regardless of whether other sites link to it. It doesn't work on all search engines and web crawlers, but it significantly reduces the amount. Add the X-Robots-Tag config line to ssl.conf to enable it on all of your applications: add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\"; Disable on a specific application and allow search engines to display it by add the following line to the application config inside the server tag: add_header X-Robots-Tag \"\";","title":"X-Robots-Tag"},{"location":"secure/#hsts","text":"HTTP Strict Transport Security (HSTS) is a web security policy mechanism that helps to protect websites against man-in-the-middle attacks such as protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should automatically interact with it using only HTTPS connections, which provide Transport Layer Security (TLS/SSL), unlike the insecure HTTP used alone. HSTS requires a working SSL certificate on your domains before enabling it. Enable HSTS by uncommenting the HSTS config line in ssl.conf: add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always;","title":"HSTS"},{"location":"secure/#optional-strengthening-hsts","text":"After enabling the HSTS header, users are still vulnerable to attack if they access an HSTS\u2011protected website over HTTP when they have: Never before visited the site Recently reinstalled their operating system Recently reinstalled their browser Switched to a new browser Switched to a new device (for example, mobile phone) Deleted their browser\u2019s cache Not visited the site recently and the max-age time has passed To address this, Google maintains a \u201cHSTS preload list\u201d of web domains and subdomains that use HSTS and have submitted their names to HSTS Preload . This domain list is distributed and hardcoded into major web browsers. Clients that access web domains in this list automatically use HTTPS and refuse to access the site using HTTP. Be aware that once you set the STS header or submit your domains to the HSTS preload list, it is impossible to remove it. It\u2019s a one\u2011way decision to make your domains available over HTTPS.","title":"Optional - Strengthening HSTS"},{"location":"secure/#authelia","text":"Authelia is an open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal. Refer to this blog post to configure Authelia .","title":"Authelia"},{"location":"setup/","text":"Setup Diagram Template Use the following template to create a diagram of your setup. Requirements The online draw.io or the self-hosted draw.io , here is an example compose: drawio : image : jgraph/drawio:alpine container_name : drawio ports : - 8080:8080 restart : always Download","title":"Setup Template"},{"location":"setup/#setup-diagram-template","text":"Use the following template to create a diagram of your setup.","title":"Setup Diagram Template"},{"location":"setup/#requirements","text":"The online draw.io or the self-hosted draw.io , here is an example compose: drawio : image : jgraph/drawio:alpine container_name : drawio ports : - 8080:8080 restart : always","title":"Requirements"},{"location":"setup/#download","text":"","title":"Download"},{"location":"socks/","text":"Route Applications Through a SOCKS Proxy This setup allows you to route specific applications through randomized SOCKS proxies by your VPN provider without the entire devices having to connect to the VPN. TLDR Use NGINX through a Wireguard container to load balance between the VPN provider's SOCKS5 proxies and configure applications to use the NGINX proxy. Initial VPN Wireguard Client Configuration Configure your VPN Wireguard Client according to the Wireguard documentation . vpn : image : ghcr.io/linuxserver/wireguard container_name : vpn cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs vpn contains no errors (Ignore the missing wg0.conf message). Connecting the Wireguard Client to the VPN Copy the Wireguard configuration that you get from your VPN provider into a file called wg0.conf and place it in your VPN Wireguard Client's config folder, and make the following changes: Remove IPv6 addresses (and ::/0) if you haven't enabled IPv6 in your docker network Add the PostUp and PreDown lines listed below [Interface] PrivateKey = <private-key> Address = <some-address>/32 DNS = <some-address> PostUp = DROUTE= $ (ip route | grep default | awk ' { print $3}' ) ; HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route add $HOMENET3 via $DROUTE ; ip route add $HOMENET2 via $DROUTE ; ip route add $HOMENET via $DROUTE ; iptables -I OUTPUT -d $HOMENET -j ACCEPT ; iptables -A OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -A OUTPUT -d $HOMENET3 -j ACCEPT ; iptables -A OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT PreDown = HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route del $HOMENET3 via $DROUTE ; ip route del $HOMENET2 via $DROUTE ; ip route del $HOMENET via $DROUTE ; iptables -D OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT ; iptables -D OUTPUT -d $HOMENET -j ACCEPT ; iptables -D OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -D OUTPUT -d $HOMENET3 -j ACCEPT [Peer] PublicKey = <public-key> AllowedIPs = 0 .0.0.0/0 Endpoint = <some-address>:<some-port> The PostUp command adds a killswitch using iptables rules to prevent connections on other interfaces. Connections from LAN networks are still allowed to be able to connect to the services in the containers. The PreDown command cleans up these rules when the VPN goes down. Save the changes and restart the container with docker restart vpn , validate that docker logs vpn contains no errors. Perform the following validations to check that the VPN works: Check that you have connectivity by running docker exec vpn ping 1.1.1.1 Check that the VPN is working by running docker exec vpn curl -s https://am.i.mullvad.net/ip , you should get an IP that is different from your internet's IP. NGINX Configuration Create an NGINX container using the following compose: --- proxy : image : ghcr.io/linuxserver/nginx container_name : proxy environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - </path/to/proxy/config>:/config network_mode : \"service:vpn\" restart : unless-stopped Edit /path/to/proxy/config/nginx/nginx.conf , delete everything and paste the following: ## Version 2021/06/15 - Changelog: https://github.com/linuxserver/docker-baseimage-alpine-nginx/commits/master/root/defaults/nginx.conf user abc ; worker_processes 4 ; pid /run/nginx.pid ; include /etc/nginx/modules/*.conf ; events { worker_connections 768 ; } stream { upstream stream_backend { random ; server ch5-wg.socks5.mullvad.net : 1080 ; server ch6-wg.socks5.mullvad.net : 1080 ; server ch7-wg.socks5.mullvad.net : 1080 ; server ch8-wg.socks5.mullvad.net : 1080 ; server ch9-wg.socks5.mullvad.net : 1080 ; } server { listen 1080 ; proxy_pass stream_backend ; } } daemon off ; Replace the list of proxy servers such as server ch5-wg.socks5.mullvad.net:1080 with proxy servers of your VPN provider. Add the port under the VPN Wireguard Client container: ports : - 1080:1080 # SOCKS proxy Recreate the VPN Wireguard Client container to apply the changes, then recreate the NGINX proxy container which depends on the VPN. Check that the proxy is working by running the following multiple times, you should get different IPs that are different from your internet's IP. curl --socks5 localhost:1080 https://ifconfig.me Now configure the applications to use the SOCKS proxy on your server's IP and port 1080, and exclude your local domain and IP range. For example in Firefox: Notes If there are other containers routed through the same VPN container, the SOCKS proxy will act as another hop meaning if you connect to a VPN in one country and select a SOCKS proxy in another country, it will hop twice which is more secure. The performance should be almost identical to not having a SOCKS proxy, if you feel any slowness then select another proxy provided by your VPN provider.","title":"SOCKS Proxy"},{"location":"socks/#route-applications-through-a-socks-proxy","text":"This setup allows you to route specific applications through randomized SOCKS proxies by your VPN provider without the entire devices having to connect to the VPN.","title":"Route Applications Through a SOCKS Proxy"},{"location":"socks/#tldr","text":"Use NGINX through a Wireguard container to load balance between the VPN provider's SOCKS5 proxies and configure applications to use the NGINX proxy.","title":"TLDR"},{"location":"socks/#initial-vpn-wireguard-client-configuration","text":"Configure your VPN Wireguard Client according to the Wireguard documentation . vpn : image : ghcr.io/linuxserver/wireguard container_name : vpn cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs vpn contains no errors (Ignore the missing wg0.conf message).","title":"Initial VPN Wireguard Client Configuration"},{"location":"socks/#connecting-the-wireguard-client-to-the-vpn","text":"Copy the Wireguard configuration that you get from your VPN provider into a file called wg0.conf and place it in your VPN Wireguard Client's config folder, and make the following changes: Remove IPv6 addresses (and ::/0) if you haven't enabled IPv6 in your docker network Add the PostUp and PreDown lines listed below [Interface] PrivateKey = <private-key> Address = <some-address>/32 DNS = <some-address> PostUp = DROUTE= $ (ip route | grep default | awk ' { print $3}' ) ; HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route add $HOMENET3 via $DROUTE ; ip route add $HOMENET2 via $DROUTE ; ip route add $HOMENET via $DROUTE ; iptables -I OUTPUT -d $HOMENET -j ACCEPT ; iptables -A OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -A OUTPUT -d $HOMENET3 -j ACCEPT ; iptables -A OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT PreDown = HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route del $HOMENET3 via $DROUTE ; ip route del $HOMENET2 via $DROUTE ; ip route del $HOMENET via $DROUTE ; iptables -D OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT ; iptables -D OUTPUT -d $HOMENET -j ACCEPT ; iptables -D OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -D OUTPUT -d $HOMENET3 -j ACCEPT [Peer] PublicKey = <public-key> AllowedIPs = 0 .0.0.0/0 Endpoint = <some-address>:<some-port> The PostUp command adds a killswitch using iptables rules to prevent connections on other interfaces. Connections from LAN networks are still allowed to be able to connect to the services in the containers. The PreDown command cleans up these rules when the VPN goes down. Save the changes and restart the container with docker restart vpn , validate that docker logs vpn contains no errors. Perform the following validations to check that the VPN works: Check that you have connectivity by running docker exec vpn ping 1.1.1.1 Check that the VPN is working by running docker exec vpn curl -s https://am.i.mullvad.net/ip , you should get an IP that is different from your internet's IP.","title":"Connecting the Wireguard Client to the VPN"},{"location":"socks/#nginx-configuration","text":"Create an NGINX container using the following compose: --- proxy : image : ghcr.io/linuxserver/nginx container_name : proxy environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - </path/to/proxy/config>:/config network_mode : \"service:vpn\" restart : unless-stopped Edit /path/to/proxy/config/nginx/nginx.conf , delete everything and paste the following: ## Version 2021/06/15 - Changelog: https://github.com/linuxserver/docker-baseimage-alpine-nginx/commits/master/root/defaults/nginx.conf user abc ; worker_processes 4 ; pid /run/nginx.pid ; include /etc/nginx/modules/*.conf ; events { worker_connections 768 ; } stream { upstream stream_backend { random ; server ch5-wg.socks5.mullvad.net : 1080 ; server ch6-wg.socks5.mullvad.net : 1080 ; server ch7-wg.socks5.mullvad.net : 1080 ; server ch8-wg.socks5.mullvad.net : 1080 ; server ch9-wg.socks5.mullvad.net : 1080 ; } server { listen 1080 ; proxy_pass stream_backend ; } } daemon off ; Replace the list of proxy servers such as server ch5-wg.socks5.mullvad.net:1080 with proxy servers of your VPN provider. Add the port under the VPN Wireguard Client container: ports : - 1080:1080 # SOCKS proxy Recreate the VPN Wireguard Client container to apply the changes, then recreate the NGINX proxy container which depends on the VPN. Check that the proxy is working by running the following multiple times, you should get different IPs that are different from your internet's IP. curl --socks5 localhost:1080 https://ifconfig.me Now configure the applications to use the SOCKS proxy on your server's IP and port 1080, and exclude your local domain and IP range. For example in Firefox:","title":"NGINX Configuration"},{"location":"socks/#notes","text":"If there are other containers routed through the same VPN container, the SOCKS proxy will act as another hop meaning if you connect to a VPN in one country and select a SOCKS proxy in another country, it will hop twice which is more secure. The performance should be almost identical to not having a SOCKS proxy, if you feel any slowness then select another proxy provided by your VPN provider.","title":"Notes"},{"location":"split/","text":"Always-on Split Tunnel This setup allows your phone to always be connected to both your VPN provider and to your home. TLDR Set the home Wireguard server to the same subnet as the IP you got from your VPN provider and split the allowed IPs with the Wireguard AllowedIPs Calculator . Requirements A VPN provider that supports Wireguard A home Wireguard server An Android phone The official Wireguard application VPN Provider Configuration The VPN provider will provide you with a Wireguard config or a QR code, for example: PublicKey = aV/aFODKJH5894674CtdyhPDDFiE/qwe/1xnRM= [Interface] PrivateKey = EFvrTq36k22b+DXN6788bOIeONjklb2KLVPVj/CUd3o= Address = 10.22.46.77/32,fc00:bbbb:bbbb:bb01::2:d2ab/128 DNS = 193.138.44.22 [Peer] PublicKey = aV/aDhwG0fmp0XuvSnbmWjCtdyhPDDFiE/qwe/1xnRM= AllowedIPs = 0.0.0.0/0,::0/0 Endpoint = 193.8.66.48:51820 Verify that it works by connecting the phone to it. Home Wireguard Configuration Set the home Wireguard server to the same subnet as the IP provided by your VPN provider. In this example the home Wireguard server should have this configuration: IP Address - 10.22.46.1 Subnet - 10.22.46.0/24 Create a client configuration for your phone with the same IP address, private key, and public key. In this example the home Wireguard server should have a client with this configuration: IP Address - 10.22.46.77/32 PublicKey - aV/aFODKJH5894674CtdyhPDDFiE/qwe/1xnRM= PrivateKey - EFvrTq36k22b+DXN6788bOIeONjklb2KLVPVj/CUd3o= Verify that it works by connecting the phone to it. Merging the Tunnels Edit the connection to the VPN provider > Add Peer: Public Key - Copy the public key of the home Wireguard server. Endpoint - your.domain.com:51820 (replace with your domain and Wireguard server port) Allowed IPs - The home network subnet, for example: 192.168.1.0/24 Navigate to the Wireguard AllowedIPs Calculator , set Allowed IPs to 0.0.0.0/0, ::/0 and Disallowed IPs to the home network subnet, for example: 192.168.1.0/24 , click Calculate and copy the result, for example: 0.0.0.0/1, 128.0.0.0/2, 192.0.0.0/9, 192.128.0.0/11, 192.160.0.0/13, 192.168.0.0/24, 192.168.2.0/23, 192.168.4.0/22, 192.168.8.0/21, 192.168.16.0/20, 192.168.32.0/19, 192.168.64.0/18, 192.168.128.0/17, 192.169.0.0/16, 192.170.0.0/15, 192.172.0.0/14, 192.176.0.0/12, 192.192.0.0/10, 193.0.0.0/8, 194.0.0.0/7, 196.0.0.0/6, 200.0.0.0/5, 208.0.0.0/4, 224.0.0.0/3, ::/0 Paste the result into the first peer (the VPN provider peer) under Allowed IPs. Lastly, change the DNS servers field to the IP of the home DNS if needed (make sure the DNS address is within the Allowed IPs of the home Wireguard server peer). Example Client Config [Interface] Address = 10.167.26.220/32, fc00:bbbb:bbbb:bb05::2:d8db/128 DNS = 10.1.1.1 PrivateKey = redacted [Peer] AllowedIPs = 10.1.1.0/24 Endpoint = home.com:51820 PublicKey = redacted [Peer] AllowedIPs = 0.0.0.0/5, 8.0.0.0/7, 10.0.0.0/16, 10.1.0.0/24, 10.1.2.0/23, 10.1.4.0/22, 10.1.8.0/21, 10.1.16.0/20, 10.1.32.0/19, 10.1.64.0/18, 10.1.128.0/17, 10.2.0.0/15, 10.4.0.0/14, 10.8.0.0/13, 10.16.0.0/12, 10.32.0.0/11, 10.64.0.0/10, 10.128.0.0/9, 11.0.0.0/8, 12.0.0.0/6, 16.0.0.0/4, 32.0.0.0/3, 64.0.0.0/2, 128.0.0.0/1, ::/0 Endpoint = 193.32.127.70:51820 PublicKey = redacted Additional Configuration DNS Access List The Wireguard server subnet may need to be added to the DNS access list, for example in OPNSense under Services > Unbound DNS > Access Lists > Add > allow 10.22.46.0/24 . Reverse Proxy The Wireguard server subnet may need to be added to the reverse proxy's LAN IP ranges, for example in SWAG it should be added to Allow/Deny and to Geoblock . Always-on The tunnel can stay connected at all times, even when you're at home, it can be enabled under Settings > Network & Internet > Advanced > VPN > Wireguard Settings > Enable Always-on VPN. Troubleshoot Push notifications are not working In the Wireguard app edit the tunnel configuration and add an application exclusion for Google Play services. The phone battery is being drained quickly Make sure that you didn't set a Persistent Keep-alive on either the server Wireguard configuration or the client tunnel configuration.","title":"Split Tunnel"},{"location":"split/#always-on-split-tunnel","text":"This setup allows your phone to always be connected to both your VPN provider and to your home.","title":"Always-on Split Tunnel"},{"location":"split/#tldr","text":"Set the home Wireguard server to the same subnet as the IP you got from your VPN provider and split the allowed IPs with the Wireguard AllowedIPs Calculator .","title":"TLDR"},{"location":"split/#requirements","text":"A VPN provider that supports Wireguard A home Wireguard server An Android phone The official Wireguard application","title":"Requirements"},{"location":"split/#vpn-provider-configuration","text":"The VPN provider will provide you with a Wireguard config or a QR code, for example: PublicKey = aV/aFODKJH5894674CtdyhPDDFiE/qwe/1xnRM= [Interface] PrivateKey = EFvrTq36k22b+DXN6788bOIeONjklb2KLVPVj/CUd3o= Address = 10.22.46.77/32,fc00:bbbb:bbbb:bb01::2:d2ab/128 DNS = 193.138.44.22 [Peer] PublicKey = aV/aDhwG0fmp0XuvSnbmWjCtdyhPDDFiE/qwe/1xnRM= AllowedIPs = 0.0.0.0/0,::0/0 Endpoint = 193.8.66.48:51820 Verify that it works by connecting the phone to it.","title":"VPN Provider Configuration"},{"location":"split/#home-wireguard-configuration","text":"Set the home Wireguard server to the same subnet as the IP provided by your VPN provider. In this example the home Wireguard server should have this configuration: IP Address - 10.22.46.1 Subnet - 10.22.46.0/24 Create a client configuration for your phone with the same IP address, private key, and public key. In this example the home Wireguard server should have a client with this configuration: IP Address - 10.22.46.77/32 PublicKey - aV/aFODKJH5894674CtdyhPDDFiE/qwe/1xnRM= PrivateKey - EFvrTq36k22b+DXN6788bOIeONjklb2KLVPVj/CUd3o= Verify that it works by connecting the phone to it.","title":"Home Wireguard Configuration"},{"location":"split/#merging-the-tunnels","text":"Edit the connection to the VPN provider > Add Peer: Public Key - Copy the public key of the home Wireguard server. Endpoint - your.domain.com:51820 (replace with your domain and Wireguard server port) Allowed IPs - The home network subnet, for example: 192.168.1.0/24 Navigate to the Wireguard AllowedIPs Calculator , set Allowed IPs to 0.0.0.0/0, ::/0 and Disallowed IPs to the home network subnet, for example: 192.168.1.0/24 , click Calculate and copy the result, for example: 0.0.0.0/1, 128.0.0.0/2, 192.0.0.0/9, 192.128.0.0/11, 192.160.0.0/13, 192.168.0.0/24, 192.168.2.0/23, 192.168.4.0/22, 192.168.8.0/21, 192.168.16.0/20, 192.168.32.0/19, 192.168.64.0/18, 192.168.128.0/17, 192.169.0.0/16, 192.170.0.0/15, 192.172.0.0/14, 192.176.0.0/12, 192.192.0.0/10, 193.0.0.0/8, 194.0.0.0/7, 196.0.0.0/6, 200.0.0.0/5, 208.0.0.0/4, 224.0.0.0/3, ::/0 Paste the result into the first peer (the VPN provider peer) under Allowed IPs. Lastly, change the DNS servers field to the IP of the home DNS if needed (make sure the DNS address is within the Allowed IPs of the home Wireguard server peer).","title":"Merging the Tunnels"},{"location":"split/#example-client-config","text":"[Interface] Address = 10.167.26.220/32, fc00:bbbb:bbbb:bb05::2:d8db/128 DNS = 10.1.1.1 PrivateKey = redacted [Peer] AllowedIPs = 10.1.1.0/24 Endpoint = home.com:51820 PublicKey = redacted [Peer] AllowedIPs = 0.0.0.0/5, 8.0.0.0/7, 10.0.0.0/16, 10.1.0.0/24, 10.1.2.0/23, 10.1.4.0/22, 10.1.8.0/21, 10.1.16.0/20, 10.1.32.0/19, 10.1.64.0/18, 10.1.128.0/17, 10.2.0.0/15, 10.4.0.0/14, 10.8.0.0/13, 10.16.0.0/12, 10.32.0.0/11, 10.64.0.0/10, 10.128.0.0/9, 11.0.0.0/8, 12.0.0.0/6, 16.0.0.0/4, 32.0.0.0/3, 64.0.0.0/2, 128.0.0.0/1, ::/0 Endpoint = 193.32.127.70:51820 PublicKey = redacted","title":"Example Client Config"},{"location":"split/#additional-configuration","text":"","title":"Additional Configuration"},{"location":"split/#dns-access-list","text":"The Wireguard server subnet may need to be added to the DNS access list, for example in OPNSense under Services > Unbound DNS > Access Lists > Add > allow 10.22.46.0/24 .","title":"DNS Access List"},{"location":"split/#reverse-proxy","text":"The Wireguard server subnet may need to be added to the reverse proxy's LAN IP ranges, for example in SWAG it should be added to Allow/Deny and to Geoblock .","title":"Reverse Proxy"},{"location":"split/#always-on","text":"The tunnel can stay connected at all times, even when you're at home, it can be enabled under Settings > Network & Internet > Advanced > VPN > Wireguard Settings > Enable Always-on VPN.","title":"Always-on"},{"location":"split/#troubleshoot","text":"","title":"Troubleshoot"},{"location":"split/#push-notifications-are-not-working","text":"In the Wireguard app edit the tunnel configuration and add an application exclusion for Google Play services.","title":"Push notifications are not working"},{"location":"split/#the-phone-battery-is-being-drained-quickly","text":"Make sure that you didn't set a Persistent Keep-alive on either the server Wireguard configuration or the client tunnel configuration.","title":"The phone battery is being drained quickly"},{"location":"tmux/","text":"Tmux - Getting Started tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. It can also be used to detach processes from their controlling terminals, allowing SSH sessions to remain active without being visible. Installation OSx brew install tmux reattach-to-user-namespace Enable Copy/Paste iTerm2 > Preferences > General > Selection > Applications in terminal may access clipboard Debian / Ubuntu sudo apt install tmux xsel Install TPM git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm Initial Configuration Copy the following to ~/.tmux.conf set -g mouse on unbind-key C-b unbind-key C-x set-option -g prefix C-a bind C-x setw synchronize-panes bind-key h split-window -h bind-key v split-window -v set -g status-justify \"centre\" set -g set-titles on set -g base-index 1 set -g status-bg black set -g status-fg white setw -g automatic-rename on setw -g window-status-current-format \"#{?pane_synchronized,#[bg=red],#[fg=white, bg=blue]} #I #W #[fg=blue, bg=black]\" set -g @plugin \"tmux-plugins/tpm\" set -g @plugin \"tmux-plugins/tmux-sensible\" set -g @plugin \"tmux-plugins/tmux-resurrect\" set -g @plugin \"tmux-plugins/tmux-continuum\" set -g @plugin \"tmux-plugins/tmux-yank\" set -g @yank_selection_mouse \"clipboard\" set -g @resurrect-processes \":all:\" set -g @resurrect-capture-pane-contents \"on\" run \"~/.tmux/plugins/tpm/tpm\" Commands tmux start a new session tmux ls list all sessions tmux a attach to an existing session tmux a -t <name> attach to a named session tmux new -s <name> start a new named session tmux kill-session -t <name> kill a named session tmux kill-server kill all sessions Keyboard Shortcuts The modifier prefix has been changed from the default ctrl-b to ctrl-a which is more convenient. Use the modifier prefix ctrl-a with these keyboard shortcuts. ? list shortcuts R reload the configuration I install new pluginx d detach the session h split horizontally v split vertically c create a new window p switch to the previous window n switch to the next window w list the windows 1-9 switch to the window number , rename the window $ rename the session ctrl-s save the environment to the disk ctrl-r restore the environment from the disk arrows switch between panes ctrl+arrows resize pane space switch pane layout z maximize/minimize pane ctrl-x synchronize panes Automation Example tmux new-window -n status tmux split-window -h tmux select-pane -t 0 tmux send-keys \"htop\" C-m tmux split-window -v tmux select-pane -t 1 tmux send-keys \"docker stats\" C-m tmux select-pane -t 2 Convenient Aliases Copy the following to ~/.zshrc alias t='tmux' alias ts='tmux new -s' alias tks='tmux kill-session -t' alias tka='tmux kill-server' Links Find more ways to use Tmux - Awesome Tmux","title":"Tmux"},{"location":"tmux/#tmux-getting-started","text":"tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. It can also be used to detach processes from their controlling terminals, allowing SSH sessions to remain active without being visible.","title":"Tmux - Getting Started"},{"location":"tmux/#installation","text":"","title":"Installation"},{"location":"tmux/#osx","text":"brew install tmux reattach-to-user-namespace","title":"OSx"},{"location":"tmux/#enable-copypaste","text":"iTerm2 > Preferences > General > Selection > Applications in terminal may access clipboard","title":"Enable Copy/Paste"},{"location":"tmux/#debian-ubuntu","text":"sudo apt install tmux xsel","title":"Debian / Ubuntu"},{"location":"tmux/#install-tpm","text":"git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm","title":"Install TPM"},{"location":"tmux/#initial-configuration","text":"Copy the following to ~/.tmux.conf set -g mouse on unbind-key C-b unbind-key C-x set-option -g prefix C-a bind C-x setw synchronize-panes bind-key h split-window -h bind-key v split-window -v set -g status-justify \"centre\" set -g set-titles on set -g base-index 1 set -g status-bg black set -g status-fg white setw -g automatic-rename on setw -g window-status-current-format \"#{?pane_synchronized,#[bg=red],#[fg=white, bg=blue]} #I #W #[fg=blue, bg=black]\" set -g @plugin \"tmux-plugins/tpm\" set -g @plugin \"tmux-plugins/tmux-sensible\" set -g @plugin \"tmux-plugins/tmux-resurrect\" set -g @plugin \"tmux-plugins/tmux-continuum\" set -g @plugin \"tmux-plugins/tmux-yank\" set -g @yank_selection_mouse \"clipboard\" set -g @resurrect-processes \":all:\" set -g @resurrect-capture-pane-contents \"on\" run \"~/.tmux/plugins/tpm/tpm\"","title":"Initial Configuration"},{"location":"tmux/#commands","text":"tmux start a new session tmux ls list all sessions tmux a attach to an existing session tmux a -t <name> attach to a named session tmux new -s <name> start a new named session tmux kill-session -t <name> kill a named session tmux kill-server kill all sessions","title":"Commands"},{"location":"tmux/#keyboard-shortcuts","text":"The modifier prefix has been changed from the default ctrl-b to ctrl-a which is more convenient. Use the modifier prefix ctrl-a with these keyboard shortcuts. ? list shortcuts R reload the configuration I install new pluginx d detach the session h split horizontally v split vertically c create a new window p switch to the previous window n switch to the next window w list the windows 1-9 switch to the window number , rename the window $ rename the session ctrl-s save the environment to the disk ctrl-r restore the environment from the disk arrows switch between panes ctrl+arrows resize pane space switch pane layout z maximize/minimize pane ctrl-x synchronize panes","title":"Keyboard Shortcuts"},{"location":"tmux/#automation-example","text":"tmux new-window -n status tmux split-window -h tmux select-pane -t 0 tmux send-keys \"htop\" C-m tmux split-window -v tmux select-pane -t 1 tmux send-keys \"docker stats\" C-m tmux select-pane -t 2","title":"Automation Example"},{"location":"tmux/#convenient-aliases","text":"Copy the following to ~/.zshrc alias t='tmux' alias ts='tmux new -s' alias tks='tmux kill-session -t' alias tka='tmux kill-server'","title":"Convenient Aliases"},{"location":"tmux/#links","text":"Find more ways to use Tmux - Awesome Tmux","title":"Links"},{"location":"vpn/","text":"VPN Route This setup allows you to route containers through a VPN and protect yourself from your ISP. This guide is the basic step-by-step version of great blog posts by Spad and Tokugero which also contain more advanced information. qBittorrent and Mullvad are used in this guide as an example, but you can route any container the same way, and use any VPN service that supports Wireguard. Requirements A working instance of qBittorrent Initial VPN Wireguard Client Configuration Configure your VPN Wireguard Client according to the Wireguard documentation . vpn : image : ghcr.io/linuxserver/wireguard container_name : vpn cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs vpn contains no errors (Ignore the missing wg0.conf message). Connecting the Wireguard Client to the VPN Copy the Wireguard configuration that you get from your VPN provider into a file called wg0.conf and place it in your VPN Wireguard Client's config folder, and make the following changes: Remove IPv6 addresses (and ::/0) if you haven't enabled IPv6 in your docker network Add the PostUp and PreDown lines listed below [Interface] PrivateKey = <private-key> Address = <some-address>/32 DNS = <some-address> PostUp = DROUTE= $ (ip route | grep default | awk ' { print $3}' ) ; HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route add $HOMENET3 via $DROUTE ; ip route add $HOMENET2 via $DROUTE ; ip route add $HOMENET via $DROUTE ; iptables -I OUTPUT -d $HOMENET -j ACCEPT ; iptables -A OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -A OUTPUT -d $HOMENET3 -j ACCEPT ; iptables -A OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT PreDown = HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route del $HOMENET3 via $DROUTE ; ip route del $HOMENET2 via $DROUTE ; ip route del $HOMENET via $DROUTE ; iptables -D OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT ; iptables -D OUTPUT -d $HOMENET -j ACCEPT ; iptables -D OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -D OUTPUT -d $HOMENET3 -j ACCEPT [Peer] PublicKey = <public-key> AllowedIPs = 0 .0.0.0/0 Endpoint = <some-address>:<some-port> The PostUp command adds a killswitch using iptables rules to prevent connections on other interfaces. Connections from LAN networks are still allowed to be able to connect to the services in the containers. The PreDown command cleans up these rules when the VPN goes down. Save the changes and restart the container with docker restart vpn , validate that docker logs vpn contains no errors. Perform the following validations to check that the VPN works: Check that you have connectivity by running docker exec vpn ping 1.1.1.1 Check that the VPN is working by running docker exec vpn curl -s https://am.i.mullvad.net/ip , you should get an IP that is different from your internet's IP. Routing qBittorrent Through the VPN Replace the following lines on the qBittorrent container: ports : - 6881:6881 - 6881:6881/udp - 8080:8080 With: network_mode : \"service:vpn\" depends_on : - vpn Add the port under the VPN Wireguard Client container: ports : - 8080:8080 # qBittorrent Recreate the VPN Wireguard Client container to apply the changes, then recreate the qBittorrent container which depends on the VPN. Perform the following validations to check that the VPN works: Check that the VPN is working by running docker exec qbittorrent curl -s https://am.i.mullvad.net/ip and make sure you don't get your internet's IP. Check that qBittorrent's Web Administration interface is working by browsing http:// <server-ip> :8080. Configuring Other Containers Now that qBittorrent is routed through the VPN, other containers need to be configured with the change. Instead of qbittorrent they will need to use vpn to reach the qBittorrent container. SWAG Edit your qbittorrent.subdomain.conf or qbittorrent.subfolder.conf in SWAG's config folder under config/nginx/proxy-confs/ . Replace all occurrences of set $upstream_app qbittorrent; with set $upstream_app vpn; . Restart the SWAG to apply the changes with docker restart swag . Sonarr / Radarr Under Settings > Download Clients > Click qBittorrent's Download Client > Set Host to vpn > click Test & Save . Notes Port forwarding VPN providers like Mullvad support port forwarding, if your application needs it. For example in Mullvad > My Account > Manage ports and Wireguard Keys > Follow the instructions to get a port. Copy the port number you got to qBittorrent > Settings > Connection > Port used for incoming connections . Restarting order If you're experiencing problems and you want to restart everything, the correct order is: VPN - docker restart vpn Containers using the VPN - docker restart <container> Can't connect to the Web-UI of routed containers Make sure that you have added PostUp and PreDown to wg0.conf as detailed in Connecting the Wireguard Client to the VPN . DNS leaks If you want to make sure wireguard isn't using your local DNS, you can check it with docker run --network=\"container:vpn\" -it --rm tutum/dnsutils dig google.com . A DNS leak will have your local DNS under: SERVER: 192.168.1.1#53(192.168.1.1) . You can try one of 2 solutions. (Replace 8.8.8.8 with your DNS of choice) Add the following to the vpn's compose: dns : - 8.8.8.8 Add the following to the vpn's compose: command : bash -c \"cp /etc/resolv.conf /tmp/resolv.conf && sed -i 's/127.0.0.11/8.8.8.8/g' /tmp/resolv.conf && cp /tmp/resolv.conf /etc/resolv.conf && /init\"","title":"VPN Route"},{"location":"vpn/#vpn-route","text":"This setup allows you to route containers through a VPN and protect yourself from your ISP. This guide is the basic step-by-step version of great blog posts by Spad and Tokugero which also contain more advanced information. qBittorrent and Mullvad are used in this guide as an example, but you can route any container the same way, and use any VPN service that supports Wireguard.","title":"VPN Route"},{"location":"vpn/#requirements","text":"A working instance of qBittorrent","title":"Requirements"},{"location":"vpn/#initial-vpn-wireguard-client-configuration","text":"Configure your VPN Wireguard Client according to the Wireguard documentation . vpn : image : ghcr.io/linuxserver/wireguard container_name : vpn cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs vpn contains no errors (Ignore the missing wg0.conf message).","title":"Initial VPN Wireguard Client Configuration"},{"location":"vpn/#connecting-the-wireguard-client-to-the-vpn","text":"Copy the Wireguard configuration that you get from your VPN provider into a file called wg0.conf and place it in your VPN Wireguard Client's config folder, and make the following changes: Remove IPv6 addresses (and ::/0) if you haven't enabled IPv6 in your docker network Add the PostUp and PreDown lines listed below [Interface] PrivateKey = <private-key> Address = <some-address>/32 DNS = <some-address> PostUp = DROUTE= $ (ip route | grep default | awk ' { print $3}' ) ; HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route add $HOMENET3 via $DROUTE ; ip route add $HOMENET2 via $DROUTE ; ip route add $HOMENET via $DROUTE ; iptables -I OUTPUT -d $HOMENET -j ACCEPT ; iptables -A OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -A OUTPUT -d $HOMENET3 -j ACCEPT ; iptables -A OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT PreDown = HOMENET=192.168.0.0/16 ; HOMENET2=10.0.0.0/12 ; HOMENET3=172.16.0.0/12 ; ip route del $HOMENET3 via $DROUTE ; ip route del $HOMENET2 via $DROUTE ; ip route del $HOMENET via $DROUTE ; iptables -D OUTPUT ! -o %i -m mark ! --mark $ (wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT ; iptables -D OUTPUT -d $HOMENET -j ACCEPT ; iptables -D OUTPUT -d $HOMENET2 -j ACCEPT ; iptables -D OUTPUT -d $HOMENET3 -j ACCEPT [Peer] PublicKey = <public-key> AllowedIPs = 0 .0.0.0/0 Endpoint = <some-address>:<some-port> The PostUp command adds a killswitch using iptables rules to prevent connections on other interfaces. Connections from LAN networks are still allowed to be able to connect to the services in the containers. The PreDown command cleans up these rules when the VPN goes down. Save the changes and restart the container with docker restart vpn , validate that docker logs vpn contains no errors. Perform the following validations to check that the VPN works: Check that you have connectivity by running docker exec vpn ping 1.1.1.1 Check that the VPN is working by running docker exec vpn curl -s https://am.i.mullvad.net/ip , you should get an IP that is different from your internet's IP.","title":"Connecting the Wireguard Client to the VPN"},{"location":"vpn/#routing-qbittorrent-through-the-vpn","text":"Replace the following lines on the qBittorrent container: ports : - 6881:6881 - 6881:6881/udp - 8080:8080 With: network_mode : \"service:vpn\" depends_on : - vpn Add the port under the VPN Wireguard Client container: ports : - 8080:8080 # qBittorrent Recreate the VPN Wireguard Client container to apply the changes, then recreate the qBittorrent container which depends on the VPN. Perform the following validations to check that the VPN works: Check that the VPN is working by running docker exec qbittorrent curl -s https://am.i.mullvad.net/ip and make sure you don't get your internet's IP. Check that qBittorrent's Web Administration interface is working by browsing http:// <server-ip> :8080.","title":"Routing qBittorrent Through the VPN"},{"location":"vpn/#configuring-other-containers","text":"Now that qBittorrent is routed through the VPN, other containers need to be configured with the change. Instead of qbittorrent they will need to use vpn to reach the qBittorrent container.","title":"Configuring Other Containers"},{"location":"vpn/#swag","text":"Edit your qbittorrent.subdomain.conf or qbittorrent.subfolder.conf in SWAG's config folder under config/nginx/proxy-confs/ . Replace all occurrences of set $upstream_app qbittorrent; with set $upstream_app vpn; . Restart the SWAG to apply the changes with docker restart swag .","title":"SWAG"},{"location":"vpn/#sonarr-radarr","text":"Under Settings > Download Clients > Click qBittorrent's Download Client > Set Host to vpn > click Test & Save .","title":"Sonarr / Radarr"},{"location":"vpn/#notes","text":"","title":"Notes"},{"location":"vpn/#port-forwarding","text":"VPN providers like Mullvad support port forwarding, if your application needs it. For example in Mullvad > My Account > Manage ports and Wireguard Keys > Follow the instructions to get a port. Copy the port number you got to qBittorrent > Settings > Connection > Port used for incoming connections .","title":"Port forwarding"},{"location":"vpn/#restarting-order","text":"If you're experiencing problems and you want to restart everything, the correct order is: VPN - docker restart vpn Containers using the VPN - docker restart <container>","title":"Restarting order"},{"location":"vpn/#cant-connect-to-the-web-ui-of-routed-containers","text":"Make sure that you have added PostUp and PreDown to wg0.conf as detailed in Connecting the Wireguard Client to the VPN .","title":"Can't connect to the Web-UI of routed containers"},{"location":"vpn/#dns-leaks","text":"If you want to make sure wireguard isn't using your local DNS, you can check it with docker run --network=\"container:vpn\" -it --rm tutum/dnsutils dig google.com . A DNS leak will have your local DNS under: SERVER: 192.168.1.1#53(192.168.1.1) . You can try one of 2 solutions. (Replace 8.8.8.8 with your DNS of choice) Add the following to the vpn's compose: dns : - 8.8.8.8 Add the following to the vpn's compose: command : bash -c \"cp /etc/resolv.conf /tmp/resolv.conf && sed -i 's/127.0.0.11/8.8.8.8/g' /tmp/resolv.conf && cp /tmp/resolv.conf /etc/resolv.conf && /init\"","title":"DNS leaks"},{"location":"vps/","text":"VPS Proxy This setup allows you to hide your home IP, protect your privacy and protect your home server against DDOS attacks while keeping all of your data at home. Once it's up and running, exposing a resource through the VPS is as simple as adding one line to your home SWAG. The TLDR version is: Create a VPN tunnel between your home and a VPS Configure SWAG to proxy traffic through the tunnel Configure Fail2ban to block attackers There are many ways to create this setup with many variations for many different purposes, in my opinion these containers are easy to work with and to maintain, every container in this setup can be used for other purposes as well as being used for the proxy without any compromises: Home SWAG can be used as a reverse proxy for all of your other Home server containers. Home Wireguard Client can be used to route any container through the VPS. VPS SWAG can be used as a reverse proxy for all of your other VPS containers. VPS Wireguard Server can be used as your private cloud VPN server. Requirements A working instance of SWAG at home A working instance of SWAG on the VPS Initial VPS Wireguard Server Configuration Configure your VPS Wireguard Server according to the Wireguard documentation . wireguard : image : ghcr.io/linuxserver/wireguard container_name : wireguard cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London - SERVERURL=public.com - SERVERPORT=51820 - PEERS=1 - PEERDNS=auto - INTERNAL_SUBNET=10.13.13.0 - ALLOWEDIPS=10.13.13.0/24 volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules ports : - 51820:51820/udp sysctls : - net.ipv4.conf.all.src_valid_mark=1 restart : unless-stopped Note that ALLOWEDIPS is set to only allow access to the Wireguard subnet. Once done start the container and validate that docker logs wireguard contains no errors. Initial Home Wireguard Client Configuration Configure your Home Wireguard Client according to the Wireguard documentation . wireguard : image : ghcr.io/linuxserver/wireguard container_name : wireguard cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs wireguard contains no errors (Ignore the missing wg0.conf message). Connecting the Wireguard Client to the Wireguard Server Copy peer1.conf from your VPS Wireguard Server's config/peer1/ folder to your Home Wireguard Client's config folder and rename it to wg0.conf . Edit your Home Wireguard Client's wg0.conf , remove the DNS line and add the PersistentKeepalive = 25 line under Peer , it should look like this: [Interface] Address = 10 .13.13.2 PrivateKey = <private-key> ListenPort = 51820 [Peer] PublicKey = <public-key> Endpoint = <domain>:51820 AllowedIPs = 10 .13.13.0/24 PersistentKeepalive = 25 Save the changes and restart the container on your Home server with docker restart wireguard , validate that docker logs wireguard contains no errors. Validate that the tunnel is working by pinging both sides: On the Home server run - docker exec wireguard ping 10.13.13.1 On the VPS run - docker exec wireguard ping 10.13.13.2 Configuring the VPS SWAG to Use the Tunnel Replace the following lines on the VPS SWAG container: ports : - 443:443 - 80:80 With: network_mode : \"service:wireguard\" depends_on : - wireguard Add the ports under the VPS Wireguard Server container: ports : - 80:80 - 443:443 - 51820:51820/udp Add the following to the bottom of the VPS SWAG configuration under config/nginx/site-confs/default : server { listen 443 ssl ; server_name *.public.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; proxy_pass http://10.13.13.2:8080 ; } } Recreate the VPS Wireguard Server container to apply the changes, then recreate the VPS SWAG container which depends on the tunnel. Configuring the Home SWAG to Use the Tunnel Replace the following lines on the Home SWAG container: ports : - 443:443 - 80:80 With: network_mode : \"service:wireguard\" depends_on : - wireguard Add the ports under the Home Wireguard Client container: ports : - 80:80 - 443:443 - 51820:51820/udp Configure the Home SWAG to see the real IP of connections coming from the tunnel by adding the following inside the http section in config/nginx/nginx.conf : set_real_ip_from 10 .13.13.1/32 ; real_ip_header X-Forwarded-For ; In order to catch all the unused subdomains and redirect to an error page, add listen 8080 default_server; to config/nginx/site-confs/default under the main server block: # main server block server { listen 8080 default_server ; listen 443 ssl http2 default_server ; Expose a container through the tunnel by adding listen 8080; to it's proxy configuration, for example: server { listen 8080 ; listen 443 ssl ; server_name heimdall.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; set $upstream_app heimdall ; set $upstream_port 443 ; set $upstream_proto https ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Recreate the Home Wireguard Client container to apply the changes, then recreate the Home SWAG container which depends on the tunnel. Validate that the containers you exposed now work through the tunnel by browsing https://<container>.public.com/ . Fail2ban Now that everything is working, Fail2ban should ban the right IP of attackers, but they're coming in through the tunnel and iptables isn't blocking them, therefore we will block them through NGINX. Create a file called nginx.conf in your Home SWAG under config/fail2ban/action.d/ with the following: [INCLUDES] [Definition] actionstart = touch /config/nginx/blocklist.conf actionstop = actioncheck = actionban = grep -qxF \"deny <ip> ; \" /config/nginx/blocklist.conf || echo \"deny <ip> ; \" >> /config/nginx/blocklist.conf && /bin/s6-svc -r /var/run/s6/services/nginx actionunban = sed -i '/deny <ip> ; /d' /config/nginx/blocklist.conf && /bin/s6-svc -r /var/run/s6/services/nginx [Init] name = default Edit config/fail2ban/jail.local and add nginx to the action of all the jails, for example: [authelia] enabled = true filter = authelia port = http,https logpath = /authelia/authelia.log action = iptables-allports[name=authelia] nginx Add the following line into the http section in config/nginx/nginx.conf : include /config/nginx/blocklist.conf ; Restart the Home SWAG to apply the changes with docker restart swag . Notes Exposing more containers Expose more containers by simply adding listen 8080; to their proxy configuration on the Home server, for example: server { listen 8080 ; listen 443 ssl ; Restart Home SWAG by running docker restart swag to apply the changes. Restarting order If you're experiencing problems and you want to restart everything, the correct order is: VPS - docker restart wireguard VPS - docker restart swag Home - docker restart wireguard Home - docker restart swag Authelia If you expose Authelia through the tunnel, you need to make a small adjustment for the redirects to work. This will make authelia always redirect to https, since traffic through the tunnel is coming over as http but the VPS exposes https. Edit authelia-server.conf under config/nginx/ and change: proxy_set_header X-Original-URL $scheme://$http_host$request_uri ; To: proxy_set_header X-Original-URL https:// $http_host$request_uri ; Edit authelia-location.conf under config/nginx/ and change: auth_request_set $target_url $scheme://$http_host$request_uri ; To: auth_request_set $target_url https:// $http_host$request_uri ; Restart the Home SWAG to apply the changes with docker restart swag . Exposing a resource only through one domain but not the other You control what gets exposed where in 2 ways: Through the listen <port>; setting, 8080 is through the VPS and 443/80 is directly. Through the server_name something.public.com setting, if you explicitely specify the full address. If a resource isn't exposed, the default action under the main server block in your Home SWAG will apply. Attackers are filling my logs with Access Denied! If you want attackers to be redirected instead of showing them an error page and avoid them spamming the logs with 403 errors, add the following inside the http section in config/nginx/nginx.conf on both SWAGs: error_page 400 403 404 444 500 502 503 504 http://www.google.com/ ; Restart the Home SWAG to apply the changes with docker restart swag .","title":"VPS Proxy"},{"location":"vps/#vps-proxy","text":"This setup allows you to hide your home IP, protect your privacy and protect your home server against DDOS attacks while keeping all of your data at home. Once it's up and running, exposing a resource through the VPS is as simple as adding one line to your home SWAG. The TLDR version is: Create a VPN tunnel between your home and a VPS Configure SWAG to proxy traffic through the tunnel Configure Fail2ban to block attackers There are many ways to create this setup with many variations for many different purposes, in my opinion these containers are easy to work with and to maintain, every container in this setup can be used for other purposes as well as being used for the proxy without any compromises: Home SWAG can be used as a reverse proxy for all of your other Home server containers. Home Wireguard Client can be used to route any container through the VPS. VPS SWAG can be used as a reverse proxy for all of your other VPS containers. VPS Wireguard Server can be used as your private cloud VPN server.","title":"VPS Proxy"},{"location":"vps/#requirements","text":"A working instance of SWAG at home A working instance of SWAG on the VPS","title":"Requirements"},{"location":"vps/#initial-vps-wireguard-server-configuration","text":"Configure your VPS Wireguard Server according to the Wireguard documentation . wireguard : image : ghcr.io/linuxserver/wireguard container_name : wireguard cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London - SERVERURL=public.com - SERVERPORT=51820 - PEERS=1 - PEERDNS=auto - INTERNAL_SUBNET=10.13.13.0 - ALLOWEDIPS=10.13.13.0/24 volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules ports : - 51820:51820/udp sysctls : - net.ipv4.conf.all.src_valid_mark=1 restart : unless-stopped Note that ALLOWEDIPS is set to only allow access to the Wireguard subnet. Once done start the container and validate that docker logs wireguard contains no errors.","title":"Initial VPS Wireguard Server Configuration"},{"location":"vps/#initial-home-wireguard-client-configuration","text":"Configure your Home Wireguard Client according to the Wireguard documentation . wireguard : image : ghcr.io/linuxserver/wireguard container_name : wireguard cap_add : - NET_ADMIN - SYS_MODULE environment : - PUID=1000 - PGID=1000 - TZ=Europe/London volumes : - /path/to/appdata/config:/config - /lib/modules:/lib/modules restart : unless-stopped Once done start the container and validate that docker logs wireguard contains no errors (Ignore the missing wg0.conf message).","title":"Initial Home Wireguard Client Configuration"},{"location":"vps/#connecting-the-wireguard-client-to-the-wireguard-server","text":"Copy peer1.conf from your VPS Wireguard Server's config/peer1/ folder to your Home Wireguard Client's config folder and rename it to wg0.conf . Edit your Home Wireguard Client's wg0.conf , remove the DNS line and add the PersistentKeepalive = 25 line under Peer , it should look like this: [Interface] Address = 10 .13.13.2 PrivateKey = <private-key> ListenPort = 51820 [Peer] PublicKey = <public-key> Endpoint = <domain>:51820 AllowedIPs = 10 .13.13.0/24 PersistentKeepalive = 25 Save the changes and restart the container on your Home server with docker restart wireguard , validate that docker logs wireguard contains no errors. Validate that the tunnel is working by pinging both sides: On the Home server run - docker exec wireguard ping 10.13.13.1 On the VPS run - docker exec wireguard ping 10.13.13.2","title":"Connecting the Wireguard Client to the Wireguard Server"},{"location":"vps/#configuring-the-vps-swag-to-use-the-tunnel","text":"Replace the following lines on the VPS SWAG container: ports : - 443:443 - 80:80 With: network_mode : \"service:wireguard\" depends_on : - wireguard Add the ports under the VPS Wireguard Server container: ports : - 80:80 - 443:443 - 51820:51820/udp Add the following to the bottom of the VPS SWAG configuration under config/nginx/site-confs/default : server { listen 443 ssl ; server_name *.public.com ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; proxy_pass http://10.13.13.2:8080 ; } } Recreate the VPS Wireguard Server container to apply the changes, then recreate the VPS SWAG container which depends on the tunnel.","title":"Configuring the VPS SWAG to Use the Tunnel"},{"location":"vps/#configuring-the-home-swag-to-use-the-tunnel","text":"Replace the following lines on the Home SWAG container: ports : - 443:443 - 80:80 With: network_mode : \"service:wireguard\" depends_on : - wireguard Add the ports under the Home Wireguard Client container: ports : - 80:80 - 443:443 - 51820:51820/udp Configure the Home SWAG to see the real IP of connections coming from the tunnel by adding the following inside the http section in config/nginx/nginx.conf : set_real_ip_from 10 .13.13.1/32 ; real_ip_header X-Forwarded-For ; In order to catch all the unused subdomains and redirect to an error page, add listen 8080 default_server; to config/nginx/site-confs/default under the main server block: # main server block server { listen 8080 default_server ; listen 443 ssl http2 default_server ; Expose a container through the tunnel by adding listen 8080; to it's proxy configuration, for example: server { listen 8080 ; listen 443 ssl ; server_name heimdall.* ; include /config/nginx/ssl.conf ; client_max_body_size 0 ; location / { include /config/nginx/proxy.conf ; resolver 127 .0.0.11 valid=30s ; set $upstream_app heimdall ; set $upstream_port 443 ; set $upstream_proto https ; proxy_pass $upstream_proto://$upstream_app:$upstream_port ; } } Recreate the Home Wireguard Client container to apply the changes, then recreate the Home SWAG container which depends on the tunnel. Validate that the containers you exposed now work through the tunnel by browsing https://<container>.public.com/ .","title":"Configuring the Home SWAG to Use the Tunnel"},{"location":"vps/#fail2ban","text":"Now that everything is working, Fail2ban should ban the right IP of attackers, but they're coming in through the tunnel and iptables isn't blocking them, therefore we will block them through NGINX. Create a file called nginx.conf in your Home SWAG under config/fail2ban/action.d/ with the following: [INCLUDES] [Definition] actionstart = touch /config/nginx/blocklist.conf actionstop = actioncheck = actionban = grep -qxF \"deny <ip> ; \" /config/nginx/blocklist.conf || echo \"deny <ip> ; \" >> /config/nginx/blocklist.conf && /bin/s6-svc -r /var/run/s6/services/nginx actionunban = sed -i '/deny <ip> ; /d' /config/nginx/blocklist.conf && /bin/s6-svc -r /var/run/s6/services/nginx [Init] name = default Edit config/fail2ban/jail.local and add nginx to the action of all the jails, for example: [authelia] enabled = true filter = authelia port = http,https logpath = /authelia/authelia.log action = iptables-allports[name=authelia] nginx Add the following line into the http section in config/nginx/nginx.conf : include /config/nginx/blocklist.conf ; Restart the Home SWAG to apply the changes with docker restart swag .","title":"Fail2ban"},{"location":"vps/#notes","text":"","title":"Notes"},{"location":"vps/#exposing-more-containers","text":"Expose more containers by simply adding listen 8080; to their proxy configuration on the Home server, for example: server { listen 8080 ; listen 443 ssl ; Restart Home SWAG by running docker restart swag to apply the changes.","title":"Exposing more containers"},{"location":"vps/#restarting-order","text":"If you're experiencing problems and you want to restart everything, the correct order is: VPS - docker restart wireguard VPS - docker restart swag Home - docker restart wireguard Home - docker restart swag","title":"Restarting order"},{"location":"vps/#authelia","text":"If you expose Authelia through the tunnel, you need to make a small adjustment for the redirects to work. This will make authelia always redirect to https, since traffic through the tunnel is coming over as http but the VPS exposes https. Edit authelia-server.conf under config/nginx/ and change: proxy_set_header X-Original-URL $scheme://$http_host$request_uri ; To: proxy_set_header X-Original-URL https:// $http_host$request_uri ; Edit authelia-location.conf under config/nginx/ and change: auth_request_set $target_url $scheme://$http_host$request_uri ; To: auth_request_set $target_url https:// $http_host$request_uri ; Restart the Home SWAG to apply the changes with docker restart swag .","title":"Authelia"},{"location":"vps/#exposing-a-resource-only-through-one-domain-but-not-the-other","text":"You control what gets exposed where in 2 ways: Through the listen <port>; setting, 8080 is through the VPS and 443/80 is directly. Through the server_name something.public.com setting, if you explicitely specify the full address. If a resource isn't exposed, the default action under the main server block in your Home SWAG will apply.","title":"Exposing a resource only through one domain but not the other"},{"location":"vps/#attackers-are-filling-my-logs-with-access-denied","text":"If you want attackers to be redirected instead of showing them an error page and avoid them spamming the logs with 403 errors, add the following inside the http section in config/nginx/nginx.conf on both SWAGs: error_page 400 403 404 444 500 502 503 504 http://www.google.com/ ; Restart the Home SWAG to apply the changes with docker restart swag .","title":"Attackers are filling my logs with Access Denied!"}]}